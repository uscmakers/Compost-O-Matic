
/Users/adamvonarnim/Desktop/Compost-O-Matic/Compost-o-Matic/target/3.0.0/boron/Compost-o-Matic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002990  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d69b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e568  000d69b4  0001e568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000021c  2003e5d4  2003e5d4  0002e5d4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6a20  000d6a20  00026a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6a48  000d6a48  00026a48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018ad10  00000000  00000000  00026a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001792c  00000000  00000000  001b175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00035fb2  00000000  00000000  001c9088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002be0  00000000  00000000  001ff03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009608  00000000  00000000  00201c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000393e7  00000000  00000000  0020b222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003e5ba  00000000  00000000  00244609  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001295c4  00000000  00000000  00282bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000079bc  00000000  00000000  003ac188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fb57 	bl	d66e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fb5f 	bl	d6700 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e568 	.word	0x2003e568
   d404c:	000d69b4 	.word	0x000d69b4
   d4050:	2003e5d4 	.word	0x2003e5d4
   d4054:	2003e5d4 	.word	0x2003e5d4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fe45 	bl	d5cf0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d698c 	.word	0x000d698c
   d4080:	000d69b0 	.word	0x000d69b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b823 	b.w	d40ce <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f879 	bl	d4180 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bdef 	b.w	d5c74 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 be1b 	b.w	d4cd0 <malloc>

000d409a <_Znaj>:
   d409a:	f000 be19 	b.w	d4cd0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 be1f 	b.w	d4ce0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b2:	b40e      	push	{r1, r2, r3}
   d40b4:	b503      	push	{r0, r1, lr}
   d40b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d40b8:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d40c0:	f001 fba1 	bl	d5806 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40c4:	b002      	add	sp, #8
   d40c6:	f85d eb04 	ldr.w	lr, [sp], #4
   d40ca:	b003      	add	sp, #12
   d40cc:	4770      	bx	lr

000d40ce <setup>:
DS18 sensor(A4);


void publishData();

void setup() {
   d40ce:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40d0:	f001 fd84 	bl	d5bdc <_Z16_fetch_usbserialv>
}
   d40d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
   d40d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40dc:	f001 bd72 	b.w	d5bc4 <_ZN9USBSerial5beginEl>

000d40e0 <_Z11publishDatav>:
    }
    publishData();
  }
}

void publishData() {
   d40e0:	b510      	push	{r4, lr}

  Particle.publish("updateBody", String::format("{\"moisture\":%f,\"temperature\":%f,\"methane\":%f}", moisture, temperature, methane), PRIVATE);
   d40e2:	4b20      	ldr	r3, [pc, #128]	; (d4164 <_Z11publishDatav+0x84>)
void publishData() {
   d40e4:	b08c      	sub	sp, #48	; 0x30
  Particle.publish("updateBody", String::format("{\"moisture\":%f,\"temperature\":%f,\"methane\":%f}", moisture, temperature, methane), PRIVATE);
   d40e6:	6818      	ldr	r0, [r3, #0]
   d40e8:	f002 f834 	bl	d6154 <__aeabi_f2d>
   d40ec:	460b      	mov	r3, r1
   d40ee:	491e      	ldr	r1, [pc, #120]	; (d4168 <_Z11publishDatav+0x88>)
   d40f0:	4602      	mov	r2, r0
   d40f2:	6808      	ldr	r0, [r1, #0]
   d40f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d40f8:	f002 f82c 	bl	d6154 <__aeabi_f2d>
   d40fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4100:	491a      	ldr	r1, [pc, #104]	; (d416c <_Z11publishDatav+0x8c>)
   d4102:	6808      	ldr	r0, [r1, #0]
   d4104:	f002 f826 	bl	d6154 <__aeabi_f2d>
   d4108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d410c:	e9cd 0100 	strd	r0, r1, [sp]
   d4110:	4917      	ldr	r1, [pc, #92]	; (d4170 <_Z11publishDatav+0x90>)
   d4112:	a808      	add	r0, sp, #32
   d4114:	f001 fc26 	bl	d5964 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4118:	4b16      	ldr	r3, [pc, #88]	; (d4174 <_Z11publishDatav+0x94>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d411a:	9a08      	ldr	r2, [sp, #32]
   d411c:	781b      	ldrb	r3, [r3, #0]
   d411e:	f88d 3000 	strb.w	r3, [sp]
   d4122:	4915      	ldr	r1, [pc, #84]	; (d4178 <_Z11publishDatav+0x98>)
   d4124:	233c      	movs	r3, #60	; 0x3c
   d4126:	a806      	add	r0, sp, #24
   d4128:	f000 ffee 	bl	d5108 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d412c:	9c07      	ldr	r4, [sp, #28]
   d412e:	b17c      	cbz	r4, d4150 <_Z11publishDatav+0x70>
      if (--_M_use_count == 0)
   d4130:	6863      	ldr	r3, [r4, #4]
   d4132:	3b01      	subs	r3, #1
   d4134:	6063      	str	r3, [r4, #4]
   d4136:	b95b      	cbnz	r3, d4150 <_Z11publishDatav+0x70>
          _M_dispose();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4140:	68a3      	ldr	r3, [r4, #8]
   d4142:	3b01      	subs	r3, #1
   d4144:	60a3      	str	r3, [r4, #8]
   d4146:	b91b      	cbnz	r3, d4150 <_Z11publishDatav+0x70>
            _M_destroy();
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	4620      	mov	r0, r4
   d414c:	68db      	ldr	r3, [r3, #12]
   d414e:	4798      	blx	r3
   d4150:	a808      	add	r0, sp, #32
   d4152:	f001 fba7 	bl	d58a4 <_ZN6StringD1Ev>
  Serial.printlnf("publishing");
   d4156:	f001 fd41 	bl	d5bdc <_Z16_fetch_usbserialv>
   d415a:	4908      	ldr	r1, [pc, #32]	; (d417c <_Z11publishDatav+0x9c>)
   d415c:	f7ff ffa9 	bl	d40b2 <_ZN5Print8printlnfEPKcz>
}
   d4160:	b00c      	add	sp, #48	; 0x30
   d4162:	bd10      	pop	{r4, pc}
   d4164:	2003e5e0 	.word	0x2003e5e0
   d4168:	2003e5dc 	.word	0x2003e5dc
   d416c:	2003e610 	.word	0x2003e610
   d4170:	000d67b8 	.word	0x000d67b8
   d4174:	2003e5d8 	.word	0x2003e5d8
   d4178:	000d67e6 	.word	0x000d67e6
   d417c:	000d67f1 	.word	0x000d67f1

000d4180 <loop>:
void loop() {
   d4180:	b510      	push	{r4, lr}
  if (millis() - lastPublish >= ONE_MIN_PERIOD) {
   d4182:	4c0d      	ldr	r4, [pc, #52]	; (d41b8 <loop+0x38>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4184:	f000 fbe0 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	1ac0      	subs	r0, r0, r3
   d418c:	f64e 235f 	movw	r3, #59999	; 0xea5f
   d4190:	4298      	cmp	r0, r3
   d4192:	d910      	bls.n	d41b6 <loop+0x36>
   d4194:	f000 fbd8 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4198:	6020      	str	r0, [r4, #0]
    if (sensor.read()) {
   d419a:	4808      	ldr	r0, [pc, #32]	; (d41bc <loop+0x3c>)
   d419c:	f000 f91a 	bl	d43d4 <_ZN4DS184readEv>
   d41a0:	b128      	cbz	r0, d41ae <loop+0x2e>
      temperature = sensor.fahrenheit();
   d41a2:	4806      	ldr	r0, [pc, #24]	; (d41bc <loop+0x3c>)
   d41a4:	f000 f93c 	bl	d4420 <_ZN4DS1810fahrenheitEv>
   d41a8:	4b05      	ldr	r3, [pc, #20]	; (d41c0 <loop+0x40>)
   d41aa:	ed83 0a00 	vstr	s0, [r3]
}
   d41ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    publishData();
   d41b2:	f7ff bf95 	b.w	d40e0 <_Z11publishDatav>
}
   d41b6:	bd10      	pop	{r4, pc}
   d41b8:	2003e568 	.word	0x2003e568
   d41bc:	2003e5e4 	.word	0x2003e5e4
   d41c0:	2003e610 	.word	0x2003e610

000d41c4 <_GLOBAL__sub_I_moisture>:
        val_(val) {
   d41c4:	4b03      	ldr	r3, [pc, #12]	; (d41d4 <_GLOBAL__sub_I_moisture+0x10>)
DS18 sensor(A4);
   d41c6:	4804      	ldr	r0, [pc, #16]	; (d41d8 <_GLOBAL__sub_I_moisture+0x14>)
   d41c8:	2201      	movs	r2, #1
   d41ca:	701a      	strb	r2, [r3, #0]
   d41cc:	210f      	movs	r1, #15
   d41ce:	2200      	movs	r2, #0
   d41d0:	f000 b812 	b.w	d41f8 <_ZN4DS18C1Etb>
   d41d4:	2003e5d8 	.word	0x2003e5d8
   d41d8:	2003e5e4 	.word	0x2003e5e4

000d41dc <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
   d41dc:	2300      	movs	r3, #0
  _celsius = 0;
   d41de:	2200      	movs	r2, #0
  _raw = 0;
   d41e0:	8243      	strh	r3, [r0, #18]
  _celsius = 0;
   d41e2:	6142      	str	r2, [r0, #20]
  memset(_addr, 0, sizeof(_addr));
   d41e4:	6183      	str	r3, [r0, #24]
   d41e6:	61c3      	str	r3, [r0, #28]
  memset(_data, 0, sizeof(_data));
   d41e8:	6203      	str	r3, [r0, #32]
   d41ea:	6243      	str	r3, [r0, #36]	; 0x24
   d41ec:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _type = WIRE_UNKNOWN;
   d41f0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  _searchDone = false;
   d41f4:	8543      	strh	r3, [r0, #42]	; 0x2a
  _crcError = false;
}
   d41f6:	4770      	bx	lr

000d41f8 <_ZN4DS18C1Etb>:
DS18::DS18(uint16_t pin, bool parasitic)
   d41f8:	b538      	push	{r3, r4, r5, lr}
   d41fa:	4604      	mov	r4, r0
   d41fc:	4615      	mov	r5, r2
  _conversionTime{1000}
   d41fe:	f000 fa11 	bl	d4624 <_ZN7OneWireC1Et>
   d4202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  init();
   d4206:	4620      	mov	r0, r4
  _conversionTime{1000}
   d4208:	73a5      	strb	r5, [r4, #14]
   d420a:	8223      	strh	r3, [r4, #16]
  init();
   d420c:	f7ff ffe6 	bl	d41dc <_ZN4DS184initEv>
}
   d4210:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4214 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
   d4214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
   d4218:	680b      	ldr	r3, [r1, #0]
   d421a:	6183      	str	r3, [r0, #24]
   d421c:	684b      	ldr	r3, [r1, #4]
   d421e:	61c3      	str	r3, [r0, #28]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
   d4220:	780b      	ldrb	r3, [r1, #0]
   d4222:	2b26      	cmp	r3, #38	; 0x26
bool DS18::read(uint8_t addr[8]) {
   d4224:	4604      	mov	r4, r0
  memcpy(_addr, addr, sizeof(_addr));
   d4226:	f100 0518 	add.w	r5, r0, #24
  switch (addr[0]) {
   d422a:	d060      	beq.n	d42ee <_ZN4DS184readEPh+0xda>
   d422c:	d808      	bhi.n	d4240 <_ZN4DS184readEPh+0x2c>
   d422e:	2b10      	cmp	r3, #16
   d4230:	d00a      	beq.n	d4248 <_ZN4DS184readEPh+0x34>
   d4232:	2b22      	cmp	r3, #34	; 0x22
   d4234:	d059      	beq.n	d42ea <_ZN4DS184readEPh+0xd6>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
   d4236:	2000      	movs	r0, #0
   d4238:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
      }
  }

  // Got a good reading!
  return true;
}
   d423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (addr[0]) {
   d4240:	2b28      	cmp	r3, #40	; 0x28
   d4242:	d1f8      	bne.n	d4236 <_ZN4DS184readEPh+0x22>
    case 0x28: _type = WIRE_DS18B20; break;
   d4244:	2302      	movs	r3, #2
   d4246:	e000      	b.n	d424a <_ZN4DS184readEPh+0x36>
    case 0x10: _type = WIRE_DS1820; break;
   d4248:	2301      	movs	r3, #1
    case 0x26: _type = WIRE_DS2438; break;
   d424a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  _wire.reset();               // first clear the 1-wire bus
   d424e:	4620      	mov	r0, r4
   d4250:	f000 f9f2 	bl	d4638 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
   d4254:	4629      	mov	r1, r5
   d4256:	4620      	mov	r0, r4
   d4258:	f000 faac 	bl	d47b4 <_ZN7OneWire6selectEPKh>
  _wire.write(0x44, power);    // tell it to start a conversion
   d425c:	7ba2      	ldrb	r2, [r4, #14]
   d425e:	2144      	movs	r1, #68	; 0x44
   d4260:	4620      	mov	r0, r4
   d4262:	f000 fa7e 	bl	d4762 <_ZN7OneWire5writeEhh>
  delay(_conversionTime); // wait for conversion to finish
   d4266:	8a20      	ldrh	r0, [r4, #16]
   d4268:	f000 fd6a 	bl	d4d40 <delay>
  _wire.reset();
   d426c:	4620      	mov	r0, r4
   d426e:	f000 f9e3 	bl	d4638 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4272:	4629      	mov	r1, r5
   d4274:	4620      	mov	r0, r4
   d4276:	f000 fa9d 	bl	d47b4 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
   d427a:	2200      	movs	r2, #0
   d427c:	21b8      	movs	r1, #184	; 0xb8
   d427e:	4620      	mov	r0, r4
   d4280:	f000 fa6f 	bl	d4762 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
   d4284:	2200      	movs	r2, #0
   d4286:	4611      	mov	r1, r2
   d4288:	4620      	mov	r0, r4
   d428a:	f000 fa6a 	bl	d4762 <_ZN7OneWire5writeEhh>
  _wire.reset();
   d428e:	4620      	mov	r0, r4
   d4290:	f000 f9d2 	bl	d4638 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
   d4294:	4629      	mov	r1, r5
   d4296:	4620      	mov	r0, r4
   d4298:	f000 fa8c 	bl	d47b4 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
   d429c:	2200      	movs	r2, #0
   d429e:	21be      	movs	r1, #190	; 0xbe
   d42a0:	4620      	mov	r0, r4
   d42a2:	f000 fa5e 	bl	d4762 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
   d42a6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d42aa:	2b04      	cmp	r3, #4
   d42ac:	d104      	bne.n	d42b8 <_ZN4DS184readEPh+0xa4>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
   d42ae:	2200      	movs	r2, #0
   d42b0:	4611      	mov	r1, r2
   d42b2:	4620      	mov	r0, r4
   d42b4:	f000 fa55 	bl	d4762 <_ZN7OneWire5writeEhh>
   d42b8:	f104 0520 	add.w	r5, r4, #32
   d42bc:	f104 0729 	add.w	r7, r4, #41	; 0x29
   d42c0:	462e      	mov	r6, r5
    _data[i] = _wire.read();
   d42c2:	4620      	mov	r0, r4
   d42c4:	f000 fa66 	bl	d4794 <_ZN7OneWire4readEv>
   d42c8:	f805 0b01 	strb.w	r0, [r5], #1
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
   d42cc:	42af      	cmp	r7, r5
   d42ce:	d1f8      	bne.n	d42c2 <_ZN4DS184readEPh+0xae>
  if (OneWire::crc8(_data, 8) != _data[8]) {
   d42d0:	2108      	movs	r1, #8
   d42d2:	4630      	mov	r0, r6
   d42d4:	f000 fafc 	bl	d48d0 <_ZN7OneWire4crc8EPhh>
   d42d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d42dc:	4283      	cmp	r3, r0
   d42de:	d008      	beq.n	d42f2 <_ZN4DS184readEPh+0xde>
    _crcError = true;
   d42e0:	2301      	movs	r3, #1
   d42e2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d42e6:	2000      	movs	r0, #0
   d42e8:	e7a8      	b.n	d423c <_ZN4DS184readEPh+0x28>
    case 0x22: _type = WIRE_DS1822; break;
   d42ea:	2303      	movs	r3, #3
   d42ec:	e7ad      	b.n	d424a <_ZN4DS184readEPh+0x36>
    case 0x26: _type = WIRE_DS2438; break;
   d42ee:	2304      	movs	r3, #4
   d42f0:	e7ab      	b.n	d424a <_ZN4DS184readEPh+0x36>
  _raw = (_data[1] << 8) | _data[0];
   d42f2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
   d42f6:	f894 3020 	ldrb.w	r3, [r4, #32]
   d42fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   d42fe:	8263      	strh	r3, [r4, #18]
  if (_type == WIRE_DS2438) {
   d4300:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d4304:	2b04      	cmp	r3, #4
   d4306:	d14d      	bne.n	d43a4 <_ZN4DS184readEPh+0x190>
    _raw = (_data[2] << 8) | _data[1];
   d4308:	f894 8022 	ldrb.w	r8, [r4, #34]	; 0x22
   d430c:	ee07 8a90 	vmov	s15, r8
   d4310:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4314:	ea40 2308 	orr.w	r3, r0, r8, lsl #8
      _data[1] = (_data[1] >> 3) & 0x1f;
   d4318:	08c5      	lsrs	r5, r0, #3
    _raw = (_data[2] << 8) | _data[1];
   d431a:	8263      	strh	r3, [r4, #18]
      _data[1] = (_data[1] >> 3) & 0x1f;
   d431c:	ee17 0a90 	vmov	r0, s15
   d4320:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
      if (_data[2] > 127) {
   d4324:	f001 ff16 	bl	d6154 <__aeabi_f2d>
   d4328:	ee07 5a90 	vmov	s15, r5
   d432c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4330:	4606      	mov	r6, r0
   d4332:	ee17 0a90 	vmov	r0, s15
   d4336:	460f      	mov	r7, r1
   d4338:	f001 ff0c 	bl	d6154 <__aeabi_f2d>
   d433c:	4b24      	ldr	r3, [pc, #144]	; (d43d0 <_ZN4DS184readEPh+0x1bc>)
   d433e:	2200      	movs	r2, #0
   d4340:	f001 ff60 	bl	d6204 <__aeabi_dmul>
   d4344:	f018 0f80 	tst.w	r8, #128	; 0x80
   d4348:	4602      	mov	r2, r0
   d434a:	460b      	mov	r3, r1
   d434c:	d025      	beq.n	d439a <_ZN4DS184readEPh+0x186>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
   d434e:	4630      	mov	r0, r6
   d4350:	4639      	mov	r1, r7
   d4352:	f001 fd9f 	bl	d5e94 <__aeabi_dsub>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d4356:	f002 f967 	bl	d6628 <__aeabi_d2f>
   d435a:	6160      	str	r0, [r4, #20]
   d435c:	e015      	b.n	d438a <_ZN4DS184readEPh+0x176>
  byte cfg = (_data[4] & 0x60);
   d435e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   d4362:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
   d4366:	f012 0260 	ands.w	r2, r2, #96	; 0x60
   d436a:	d102      	bne.n	d4372 <_ZN4DS184readEPh+0x15e>
   d436c:	f023 0307 	bic.w	r3, r3, #7
   d4370:	e02c      	b.n	d43cc <_ZN4DS184readEPh+0x1b8>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d4372:	2a20      	cmp	r2, #32
   d4374:	d00b      	beq.n	d438e <_ZN4DS184readEPh+0x17a>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4376:	2a40      	cmp	r2, #64	; 0x40
   d4378:	d00c      	beq.n	d4394 <_ZN4DS184readEPh+0x180>
      _celsius = (float)_raw * 0.0625;
   d437a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d437e:	ee07 3a90 	vmov	s15, r3
   d4382:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   d4386:	edc4 7a05 	vstr	s15, [r4, #20]
  switch (_type) {
   d438a:	2001      	movs	r0, #1
   d438c:	e756      	b.n	d423c <_ZN4DS184readEPh+0x28>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
   d438e:	f023 0303 	bic.w	r3, r3, #3
   d4392:	e01b      	b.n	d43cc <_ZN4DS184readEPh+0x1b8>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d4394:	f023 0301 	bic.w	r3, r3, #1
   d4398:	e018      	b.n	d43cc <_ZN4DS184readEPh+0x1b8>
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
   d439a:	4632      	mov	r2, r6
   d439c:	463b      	mov	r3, r7
   d439e:	f001 fd7b 	bl	d5e98 <__adddf3>
   d43a2:	e7d8      	b.n	d4356 <_ZN4DS184readEPh+0x142>
  switch (_type) {
   d43a4:	2b03      	cmp	r3, #3
   d43a6:	d8f0      	bhi.n	d438a <_ZN4DS184readEPh+0x176>
   d43a8:	2b01      	cmp	r3, #1
   d43aa:	d8d8      	bhi.n	d435e <_ZN4DS184readEPh+0x14a>
   d43ac:	d1ed      	bne.n	d438a <_ZN4DS184readEPh+0x176>
      _raw = _raw << 3; // 9 bit resolution default
   d43ae:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d43b2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
      _raw = _raw << 3; // 9 bit resolution default
   d43b6:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
   d43b8:	2a10      	cmp	r2, #16
      _raw = _raw << 3; // 9 bit resolution default
   d43ba:	8263      	strh	r3, [r4, #18]
      if (_data[7] == 0x10) {
   d43bc:	d1dd      	bne.n	d437a <_ZN4DS184readEPh+0x166>
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
   d43be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   d43c2:	f023 030f 	bic.w	r3, r3, #15
   d43c6:	f1c2 020c 	rsb	r2, r2, #12
   d43ca:	4413      	add	r3, r2
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
   d43cc:	8263      	strh	r3, [r4, #18]
   d43ce:	e7d4      	b.n	d437a <_ZN4DS184readEPh+0x166>
   d43d0:	3fa00000 	.word	0x3fa00000

000d43d4 <_ZN4DS184readEv>:
bool DS18::read() {
   d43d4:	b538      	push	{r3, r4, r5, lr}
   d43d6:	4604      	mov	r4, r0
  init();
   d43d8:	f7ff ff00 	bl	d41dc <_ZN4DS184initEv>
  if (!_wire.search(_addr)) {
   d43dc:	f100 0518 	add.w	r5, r0, #24
   d43e0:	4629      	mov	r1, r5
   d43e2:	f000 fa01 	bl	d47e8 <_ZN7OneWire6searchEPh>
   d43e6:	b938      	cbnz	r0, d43f8 <_ZN4DS184readEv+0x24>
    _searchDone = true;
   d43e8:	2301      	movs	r3, #1
   d43ea:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    _wire.reset_search();
   d43ee:	4620      	mov	r0, r4
   d43f0:	f000 f9f2 	bl	d47d8 <_ZN7OneWire12reset_searchEv>
}
   d43f4:	2000      	movs	r0, #0
   d43f6:	bd38      	pop	{r3, r4, r5, pc}
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
   d43f8:	2107      	movs	r1, #7
   d43fa:	4628      	mov	r0, r5
   d43fc:	f000 fa68 	bl	d48d0 <_ZN7OneWire4crc8EPhh>
   d4400:	7fe3      	ldrb	r3, [r4, #31]
   d4402:	4283      	cmp	r3, r0
   d4404:	d003      	beq.n	d440e <_ZN4DS184readEv+0x3a>
    _crcError = true;
   d4406:	2301      	movs	r3, #1
   d4408:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    return false;
   d440c:	e7f2      	b.n	d43f4 <_ZN4DS184readEv+0x20>
  return read(_addr);
   d440e:	4629      	mov	r1, r5
   d4410:	4620      	mov	r0, r4
}
   d4412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read(_addr);
   d4416:	f7ff befd 	b.w	d4214 <_ZN4DS184readEPh>
   d441a:	0000      	movs	r0, r0
   d441c:	0000      	movs	r0, r0
	...

000d4420 <_ZN4DS1810fahrenheitEv>:

float DS18::celsius() {
  return _celsius;
}

float DS18::fahrenheit() {
   d4420:	b508      	push	{r3, lr}
  return _celsius * 1.8 + 32.0;
   d4422:	6940      	ldr	r0, [r0, #20]
   d4424:	f001 fe96 	bl	d6154 <__aeabi_f2d>
   d4428:	a308      	add	r3, pc, #32	; (adr r3, d444c <_ZN4DS1810fahrenheitEv+0x2c>)
   d442a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d442e:	f001 fee9 	bl	d6204 <__aeabi_dmul>
   d4432:	4b05      	ldr	r3, [pc, #20]	; (d4448 <_ZN4DS1810fahrenheitEv+0x28>)
   d4434:	2200      	movs	r2, #0
   d4436:	f001 fd2f 	bl	d5e98 <__adddf3>
   d443a:	f002 f8f5 	bl	d6628 <__aeabi_d2f>
}
   d443e:	ee00 0a10 	vmov	s0, r0
   d4442:	bd08      	pop	{r3, pc}
   d4444:	f3af 8000 	nop.w
   d4448:	40400000 	.word	0x40400000
   d444c:	cccccccd 	.word	0xcccccccd
   d4450:	3ffccccc 	.word	0x3ffccccc

000d4454 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4454:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4456:	6803      	ldr	r3, [r0, #0]
   d4458:	2b2f      	cmp	r3, #47	; 0x2f
{
   d445a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d445c:	d904      	bls.n	d4468 <nrf_gpio_pin_port_decode+0x14>
   d445e:	4a07      	ldr	r2, [pc, #28]	; (d447c <nrf_gpio_pin_port_decode+0x28>)
   d4460:	2100      	movs	r1, #0
   d4462:	200a      	movs	r0, #10
   d4464:	f000 fb80 	bl	d4b68 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d4468:	6823      	ldr	r3, [r4, #0]
   d446a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d446c:	bf83      	ittte	hi
   d446e:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d4472:	4803      	ldrhi	r0, [pc, #12]	; (d4480 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4474:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d4476:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d447a:	bd10      	pop	{r4, pc}
   d447c:	000d4939 	.word	0x000d4939
   d4480:	50000300 	.word	0x50000300

000d4484 <_ZN7OneWire19digitalWriteFastLowEv>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d4484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4486:	4c1b      	ldr	r4, [pc, #108]	; (d44f4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
      pinResetFast(_pin);
   d4488:	8805      	ldrh	r5, [r0, #0]
   d448a:	7823      	ldrb	r3, [r4, #0]
   d448c:	4e1a      	ldr	r6, [pc, #104]	; (d44f8 <_ZN7OneWire19digitalWriteFastLowEv+0x74>)
   d448e:	f3bf 8f5b 	dmb	ish
   d4492:	f013 0f01 	tst.w	r3, #1
   d4496:	d109      	bne.n	d44ac <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d4498:	4620      	mov	r0, r4
   d449a:	f7ff fe02 	bl	d40a2 <__cxa_guard_acquire>
   d449e:	b128      	cbz	r0, d44ac <_ZN7OneWire19digitalWriteFastLowEv+0x28>
   d44a0:	f000 fa6a 	bl	d4978 <HAL_Pin_Map>
   d44a4:	6030      	str	r0, [r6, #0]
   d44a6:	4620      	mov	r0, r4
   d44a8:	f7ff fe00 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44ac:	6833      	ldr	r3, [r6, #0]
   d44ae:	012d      	lsls	r5, r5, #4
   d44b0:	5d5b      	ldrb	r3, [r3, r5]
   d44b2:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44b4:	7823      	ldrb	r3, [r4, #0]
   d44b6:	f3bf 8f5b 	dmb	ish
   d44ba:	07db      	lsls	r3, r3, #31
   d44bc:	d409      	bmi.n	d44d2 <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d44be:	480d      	ldr	r0, [pc, #52]	; (d44f4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d44c0:	f7ff fdef 	bl	d40a2 <__cxa_guard_acquire>
   d44c4:	b128      	cbz	r0, d44d2 <_ZN7OneWire19digitalWriteFastLowEv+0x4e>
   d44c6:	f000 fa57 	bl	d4978 <HAL_Pin_Map>
   d44ca:	6030      	str	r0, [r6, #0]
   d44cc:	4809      	ldr	r0, [pc, #36]	; (d44f4 <_ZN7OneWire19digitalWriteFastLowEv+0x70>)
   d44ce:	f7ff fded 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44d2:	6833      	ldr	r3, [r6, #0]
   d44d4:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d44d6:	a801      	add	r0, sp, #4
   d44d8:	785b      	ldrb	r3, [r3, #1]
   d44da:	f003 031f 	and.w	r3, r3, #31
   d44de:	433b      	orrs	r3, r7
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	f7ff ffb7 	bl	d4454 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d44e6:	9a01      	ldr	r2, [sp, #4]
   d44e8:	2301      	movs	r3, #1
   d44ea:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d44ec:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }
   d44f0:	b003      	add	sp, #12
   d44f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44f4:	2003e614 	.word	0x2003e614
   d44f8:	2003e618 	.word	0x2003e618

000d44fc <_ZN7OneWire20digitalWriteFastHighEv>:

    inline void digitalWriteFastHigh() {
   d44fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44fe:	4c1b      	ldr	r4, [pc, #108]	; (d456c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
      pinSetFast(_pin);
   d4500:	8805      	ldrh	r5, [r0, #0]
   d4502:	7823      	ldrb	r3, [r4, #0]
   d4504:	4e1a      	ldr	r6, [pc, #104]	; (d4570 <_ZN7OneWire20digitalWriteFastHighEv+0x74>)
   d4506:	f3bf 8f5b 	dmb	ish
   d450a:	f013 0f01 	tst.w	r3, #1
   d450e:	d109      	bne.n	d4524 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d4510:	4620      	mov	r0, r4
   d4512:	f7ff fdc6 	bl	d40a2 <__cxa_guard_acquire>
   d4516:	b128      	cbz	r0, d4524 <_ZN7OneWire20digitalWriteFastHighEv+0x28>
   d4518:	f000 fa2e 	bl	d4978 <HAL_Pin_Map>
   d451c:	6030      	str	r0, [r6, #0]
   d451e:	4620      	mov	r0, r4
   d4520:	f7ff fdc4 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4524:	6833      	ldr	r3, [r6, #0]
   d4526:	012d      	lsls	r5, r5, #4
   d4528:	5d5b      	ldrb	r3, [r3, r5]
   d452a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d452c:	7823      	ldrb	r3, [r4, #0]
   d452e:	f3bf 8f5b 	dmb	ish
   d4532:	07db      	lsls	r3, r3, #31
   d4534:	d409      	bmi.n	d454a <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d4536:	480d      	ldr	r0, [pc, #52]	; (d456c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d4538:	f7ff fdb3 	bl	d40a2 <__cxa_guard_acquire>
   d453c:	b128      	cbz	r0, d454a <_ZN7OneWire20digitalWriteFastHighEv+0x4e>
   d453e:	f000 fa1b 	bl	d4978 <HAL_Pin_Map>
   d4542:	6030      	str	r0, [r6, #0]
   d4544:	4809      	ldr	r0, [pc, #36]	; (d456c <_ZN7OneWire20digitalWriteFastHighEv+0x70>)
   d4546:	f7ff fdb1 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d454a:	6833      	ldr	r3, [r6, #0]
   d454c:	442b      	add	r3, r5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d454e:	a801      	add	r0, sp, #4
   d4550:	785b      	ldrb	r3, [r3, #1]
   d4552:	f003 031f 	and.w	r3, r3, #31
   d4556:	433b      	orrs	r3, r7
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	f7ff ff7b 	bl	d4454 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d455e:	9a01      	ldr	r2, [sp, #4]
   d4560:	2301      	movs	r3, #1
   d4562:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4564:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    }
   d4568:	b003      	add	sp, #12
   d456a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d456c:	2003e614 	.word	0x2003e614
   d4570:	2003e618 	.word	0x2003e618

000d4574 <_ZN7OneWire11write_bytesEPKhtb.part.0>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
   d4574:	b510      	push	{r4, lr}
   d4576:	4604      	mov	r4, r0
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
    {
        noInterrupts();
   d4578:	f000 ffb8 	bl	d54ec <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff ffbd 	bl	d44fc <_ZN7OneWire20digitalWriteFastHighEv>

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4582:	8820      	ldrh	r0, [r4, #0]
   d4584:	2101      	movs	r1, #1
   d4586:	f000 f9ff 	bl	d4988 <HAL_Pin_Mode>
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
   d458a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        interrupts();
   d458e:	f000 bfaf 	b.w	d54f0 <_Z10interruptsv>
	...

000d4594 <_ZN7OneWire15digitalReadFastEv>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4594:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4598:	4d20      	ldr	r5, [pc, #128]	; (d461c <_ZN7OneWire15digitalReadFastEv+0x88>)
      return pinReadFast(_pin);
   d459a:	8806      	ldrh	r6, [r0, #0]
   d459c:	782b      	ldrb	r3, [r5, #0]
   d459e:	4f20      	ldr	r7, [pc, #128]	; (d4620 <_ZN7OneWire15digitalReadFastEv+0x8c>)
   d45a0:	f3bf 8f5b 	dmb	ish
   d45a4:	f013 0f01 	tst.w	r3, #1
   d45a8:	d109      	bne.n	d45be <_ZN7OneWire15digitalReadFastEv+0x2a>
   d45aa:	4628      	mov	r0, r5
   d45ac:	f7ff fd79 	bl	d40a2 <__cxa_guard_acquire>
   d45b0:	b128      	cbz	r0, d45be <_ZN7OneWire15digitalReadFastEv+0x2a>
   d45b2:	f000 f9e1 	bl	d4978 <HAL_Pin_Map>
   d45b6:	6038      	str	r0, [r7, #0]
   d45b8:	4628      	mov	r0, r5
   d45ba:	f7ff fd77 	bl	d40ac <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45be:	683b      	ldr	r3, [r7, #0]
   d45c0:	0136      	lsls	r6, r6, #4
   d45c2:	5d9c      	ldrb	r4, [r3, r6]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45c4:	782b      	ldrb	r3, [r5, #0]
   d45c6:	f3bf 8f5b 	dmb	ish
   d45ca:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45cc:	ea4f 1844 	mov.w	r8, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45d0:	d409      	bmi.n	d45e6 <_ZN7OneWire15digitalReadFastEv+0x52>
   d45d2:	4812      	ldr	r0, [pc, #72]	; (d461c <_ZN7OneWire15digitalReadFastEv+0x88>)
   d45d4:	f7ff fd65 	bl	d40a2 <__cxa_guard_acquire>
   d45d8:	b128      	cbz	r0, d45e6 <_ZN7OneWire15digitalReadFastEv+0x52>
   d45da:	f000 f9cd 	bl	d4978 <HAL_Pin_Map>
   d45de:	6038      	str	r0, [r7, #0]
   d45e0:	480e      	ldr	r0, [pc, #56]	; (d461c <_ZN7OneWire15digitalReadFastEv+0x88>)
   d45e2:	f7ff fd63 	bl	d40ac <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45e6:	683b      	ldr	r3, [r7, #0]
   d45e8:	4433      	add	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45ea:	a801      	add	r0, sp, #4
   d45ec:	785c      	ldrb	r4, [r3, #1]
   d45ee:	f004 041f 	and.w	r4, r4, #31
   d45f2:	ea44 0408 	orr.w	r4, r4, r8
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d45f6:	9401      	str	r4, [sp, #4]
   d45f8:	f7ff ff2c 	bl	d4454 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d45fc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return nrf_gpio_pin_read(nrf_pin);
   d4600:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4602:	a801      	add	r0, sp, #4
   d4604:	f7ff ff26 	bl	d4454 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4608:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   d460a:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d460e:	40d8      	lsrs	r0, r3
    }
   d4610:	f000 0001 	and.w	r0, r0, #1
   d4614:	b002      	add	sp, #8
   d4616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d461a:	bf00      	nop
   d461c:	2003e614 	.word	0x2003e614
   d4620:	2003e618 	.word	0x2003e618

000d4624 <_ZN7OneWireC1Et>:
OneWire::OneWire(uint16_t pin)
   d4624:	b538      	push	{r3, r4, r5, lr}
   d4626:	4604      	mov	r4, r0
   d4628:	460d      	mov	r5, r1
    pinMode(pin, INPUT);
   d462a:	4628      	mov	r0, r5
   d462c:	2100      	movs	r1, #0
   d462e:	f001 fbcf 	bl	d5dd0 <pinMode>
    _pin = pin;
   d4632:	8025      	strh	r5, [r4, #0]
}
   d4634:	4620      	mov	r0, r4
   d4636:	bd38      	pop	{r3, r4, r5, pc}

000d4638 <_ZN7OneWire5resetEv>:
{
   d4638:	b570      	push	{r4, r5, r6, lr}
   d463a:	4605      	mov	r5, r0
    noInterrupts();
   d463c:	f000 ff56 	bl	d54ec <_Z12noInterruptsv>
      HAL_Pin_Mode(_pin, INPUT);
   d4640:	8828      	ldrh	r0, [r5, #0]
   d4642:	2100      	movs	r1, #0
   d4644:	f000 f9a0 	bl	d4988 <HAL_Pin_Mode>
    interrupts();
   d4648:	f000 ff52 	bl	d54f0 <_Z10interruptsv>
   d464c:	247d      	movs	r4, #125	; 0x7d
        if (--retries == 0)
   d464e:	3c01      	subs	r4, #1
   d4650:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4654:	d02d      	beq.n	d46b2 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4656:	2002      	movs	r0, #2
   d4658:	f000 f96e 	bl	d4938 <HAL_Delay_Microseconds>
    } while (!digitalReadFast());
   d465c:	4628      	mov	r0, r5
   d465e:	f7ff ff99 	bl	d4594 <_ZN7OneWire15digitalReadFastEv>
   d4662:	2800      	cmp	r0, #0
   d4664:	d0f3      	beq.n	d464e <_ZN7OneWire5resetEv+0x16>
    noInterrupts();
   d4666:	f000 ff41 	bl	d54ec <_Z12noInterruptsv>
    digitalWriteFastLow();
   d466a:	4628      	mov	r0, r5
   d466c:	f7ff ff0a 	bl	d4484 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d4670:	2101      	movs	r1, #1
   d4672:	8828      	ldrh	r0, [r5, #0]
   d4674:	f000 f988 	bl	d4988 <HAL_Pin_Mode>
    interrupts();
   d4678:	f000 ff3a 	bl	d54f0 <_Z10interruptsv>
   d467c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4680:	f000 f95a 	bl	d4938 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
   d4684:	f000 f968 	bl	d4958 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
   d4688:	2100      	movs	r1, #0
   d468a:	4606      	mov	r6, r0
   d468c:	8828      	ldrh	r0, [r5, #0]
   d468e:	f000 f97b 	bl	d4988 <HAL_Pin_Mode>
   d4692:	2046      	movs	r0, #70	; 0x46
   d4694:	f000 f950 	bl	d4938 <HAL_Delay_Microseconds>
        r = !digitalReadFast();
   d4698:	4628      	mov	r0, r5
   d469a:	f7ff ff7b 	bl	d4594 <_ZN7OneWire15digitalReadFastEv>
   d469e:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
   d46a2:	4630      	mov	r0, r6
   d46a4:	f000 f960 	bl	d4968 <HAL_enable_irq>
   d46a8:	f44f 70cd 	mov.w	r0, #410	; 0x19a
   d46ac:	0964      	lsrs	r4, r4, #5
   d46ae:	f000 f943 	bl	d4938 <HAL_Delay_Microseconds>
}
   d46b2:	4620      	mov	r0, r4
   d46b4:	bd70      	pop	{r4, r5, r6, pc}

000d46b6 <_ZN7OneWire9write_bitEh>:
{
   d46b6:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
   d46b8:	f011 0501 	ands.w	r5, r1, #1
{
   d46bc:	4604      	mov	r4, r0
    if (v & 1)
   d46be:	d018      	beq.n	d46f2 <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
   d46c0:	f000 f94a 	bl	d4958 <HAL_disable_irq>
   d46c4:	4605      	mov	r5, r0
            digitalWriteFastLow();
   d46c6:	4620      	mov	r0, r4
   d46c8:	f7ff fedc 	bl	d4484 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d46cc:	2101      	movs	r1, #1
   d46ce:	8820      	ldrh	r0, [r4, #0]
   d46d0:	f000 f95a 	bl	d4988 <HAL_Pin_Mode>
   d46d4:	2001      	movs	r0, #1
   d46d6:	f000 f92f 	bl	d4938 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d46da:	8820      	ldrh	r0, [r4, #0]
   d46dc:	2100      	movs	r1, #0
   d46de:	f000 f953 	bl	d4988 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d46e2:	4628      	mov	r0, r5
   d46e4:	f000 f940 	bl	d4968 <HAL_enable_irq>
   d46e8:	203b      	movs	r0, #59	; 0x3b
}
   d46ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d46ee:	f000 b923 	b.w	d4938 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
   d46f2:	f000 f931 	bl	d4958 <HAL_disable_irq>
   d46f6:	4606      	mov	r6, r0
            digitalWriteFastLow();
   d46f8:	4620      	mov	r0, r4
   d46fa:	f7ff fec3 	bl	d4484 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d46fe:	2101      	movs	r1, #1
   d4700:	8820      	ldrh	r0, [r4, #0]
   d4702:	f000 f941 	bl	d4988 <HAL_Pin_Mode>
   d4706:	2041      	movs	r0, #65	; 0x41
   d4708:	f000 f916 	bl	d4938 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d470c:	8820      	ldrh	r0, [r4, #0]
   d470e:	4629      	mov	r1, r5
   d4710:	f000 f93a 	bl	d4988 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
   d4714:	4630      	mov	r0, r6
   d4716:	f000 f927 	bl	d4968 <HAL_enable_irq>
   d471a:	2005      	movs	r0, #5
   d471c:	e7e5      	b.n	d46ea <_ZN7OneWire9write_bitEh+0x34>

000d471e <_ZN7OneWire8read_bitEv>:
{
   d471e:	b538      	push	{r3, r4, r5, lr}
   d4720:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
   d4722:	f000 f919 	bl	d4958 <HAL_disable_irq>
   d4726:	4605      	mov	r5, r0
        digitalWriteFastLow();
   d4728:	4620      	mov	r0, r4
   d472a:	f7ff feab 	bl	d4484 <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
   d472e:	8820      	ldrh	r0, [r4, #0]
   d4730:	2101      	movs	r1, #1
   d4732:	f000 f929 	bl	d4988 <HAL_Pin_Mode>
   d4736:	2001      	movs	r0, #1
   d4738:	f000 f8fe 	bl	d4938 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
   d473c:	2100      	movs	r1, #0
   d473e:	8820      	ldrh	r0, [r4, #0]
   d4740:	f000 f922 	bl	d4988 <HAL_Pin_Mode>
   d4744:	200d      	movs	r0, #13
   d4746:	f000 f8f7 	bl	d4938 <HAL_Delay_Microseconds>
        r = digitalReadFast();
   d474a:	4620      	mov	r0, r4
   d474c:	f7ff ff22 	bl	d4594 <_ZN7OneWire15digitalReadFastEv>
   d4750:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
   d4752:	4628      	mov	r0, r5
   d4754:	f000 f908 	bl	d4968 <HAL_enable_irq>
   d4758:	202e      	movs	r0, #46	; 0x2e
   d475a:	f000 f8ed 	bl	d4938 <HAL_Delay_Microseconds>
}
   d475e:	4620      	mov	r0, r4
   d4760:	bd38      	pop	{r3, r4, r5, pc}

000d4762 <_ZN7OneWire5writeEhh>:
{
   d4762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4764:	460f      	mov	r7, r1
   d4766:	4615      	mov	r5, r2
   d4768:	2608      	movs	r6, #8
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d476a:	2401      	movs	r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d476c:	4227      	tst	r7, r4
   d476e:	bf14      	ite	ne
   d4770:	2101      	movne	r1, #1
   d4772:	2100      	moveq	r1, #0
   d4774:	9001      	str	r0, [sp, #4]
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d4776:	0064      	lsls	r4, r4, #1
        OneWire::write_bit((bitMask & v) ? 1 : 0);
   d4778:	f7ff ff9d 	bl	d46b6 <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d477c:	3e01      	subs	r6, #1
   d477e:	9801      	ldr	r0, [sp, #4]
   d4780:	b2e4      	uxtb	r4, r4
   d4782:	d1f3      	bne.n	d476c <_ZN7OneWire5writeEhh+0xa>
    if (power)
   d4784:	b125      	cbz	r5, d4790 <_ZN7OneWire5writeEhh+0x2e>
}
   d4786:	b003      	add	sp, #12
   d4788:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d478c:	f7ff bef2 	b.w	d4574 <_ZN7OneWire11write_bytesEPKhtb.part.0>
   d4790:	b003      	add	sp, #12
   d4792:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4794 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
   d4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4796:	4607      	mov	r7, r0
   d4798:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d479a:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d479c:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
   d479e:	4638      	mov	r0, r7
   d47a0:	f7ff ffbd 	bl	d471e <_ZN7OneWire8read_bitEv>
   d47a4:	b100      	cbz	r0, d47a8 <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
   d47a6:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
   d47a8:	0064      	lsls	r4, r4, #1
   d47aa:	3e01      	subs	r6, #1
   d47ac:	b2e4      	uxtb	r4, r4
   d47ae:	d1f6      	bne.n	d479e <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
   d47b0:	4628      	mov	r0, r5
   d47b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47b4 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d47b4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
   d47b6:	2200      	movs	r2, #0
{
   d47b8:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
   d47ba:	2155      	movs	r1, #85	; 0x55
{
   d47bc:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
   d47be:	f7ff ffd0 	bl	d4762 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
   d47c2:	1e65      	subs	r5, r4, #1
   d47c4:	3407      	adds	r4, #7
        write(rom[i]);
   d47c6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d47ca:	2200      	movs	r2, #0
   d47cc:	4630      	mov	r0, r6
   d47ce:	f7ff ffc8 	bl	d4762 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
   d47d2:	42a5      	cmp	r5, r4
   d47d4:	d1f7      	bne.n	d47c6 <_ZN7OneWire6selectEPKh+0x12>
}
   d47d6:	bd70      	pop	{r4, r5, r6, pc}

000d47d8 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
   d47d8:	2300      	movs	r3, #0
   d47da:	8043      	strh	r3, [r0, #2]
   d47dc:	8083      	strh	r3, [r0, #4]
   d47de:	80c3      	strh	r3, [r0, #6]
   d47e0:	8103      	strh	r3, [r0, #8]
    LastDiscrepancy = 0;
   d47e2:	8143      	strh	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d47e4:	7303      	strb	r3, [r0, #12]
        if (i == 0)
            break;
    }
}
   d47e6:	4770      	bx	lr

000d47e8 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d47e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d47ec:	f890 900c 	ldrb.w	r9, [r0, #12]
{
   d47f0:	4604      	mov	r4, r0
   d47f2:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
   d47f4:	f1b9 0f00 	cmp.w	r9, #0
   d47f8:	d00d      	beq.n	d4816 <_ZN7OneWire6searchEPh+0x2e>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
   d47fa:	2000      	movs	r0, #0
   d47fc:	8160      	strh	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d47fe:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
   d4800:	1ca3      	adds	r3, r4, #2
   d4802:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4806:	340a      	adds	r4, #10
        newAddr[i] = ROM_NO[i];
   d4808:	f813 2b01 	ldrb.w	r2, [r3], #1
   d480c:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
   d4810:	42a3      	cmp	r3, r4
   d4812:	d1f9      	bne.n	d4808 <_ZN7OneWire6searchEPh+0x20>
   d4814:	e004      	b.n	d4820 <_ZN7OneWire6searchEPh+0x38>
        if (!reset())
   d4816:	f7ff ff0f 	bl	d4638 <_ZN7OneWire5resetEv>
   d481a:	b918      	cbnz	r0, d4824 <_ZN7OneWire6searchEPh+0x3c>
            LastDiscrepancy = 0;
   d481c:	8160      	strh	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d481e:	7320      	strb	r0, [r4, #12]

    return search_result;
}
   d4820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        write(0xF0);
   d4824:	464a      	mov	r2, r9
   d4826:	21f0      	movs	r1, #240	; 0xf0
   d4828:	4620      	mov	r0, r4
   d482a:	f7ff ff9a 	bl	d4762 <_ZN7OneWire5writeEhh>
    rom_byte_mask = 1;
   d482e:	2601      	movs	r6, #1
    rom_byte_number = 0;
   d4830:	46ca      	mov	sl, r9
    id_bit_number = 1;
   d4832:	4635      	mov	r5, r6
            id_bit = read_bit();
   d4834:	4620      	mov	r0, r4
   d4836:	f7ff ff72 	bl	d471e <_ZN7OneWire8read_bitEv>
   d483a:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
   d483c:	4620      	mov	r0, r4
   d483e:	f7ff ff6e 	bl	d471e <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
   d4842:	2f01      	cmp	r7, #1
   d4844:	d10f      	bne.n	d4866 <_ZN7OneWire6searchEPh+0x7e>
   d4846:	2801      	cmp	r0, #1
   d4848:	d127      	bne.n	d489a <_ZN7OneWire6searchEPh+0xb2>
        if (!(id_bit_number < 65))
   d484a:	2d40      	cmp	r5, #64	; 0x40
   d484c:	d9d5      	bls.n	d47fa <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
   d484e:	f884 900a 	strb.w	r9, [r4, #10]
            if (LastDiscrepancy == 0)
   d4852:	f1b9 0f00 	cmp.w	r9, #0
   d4856:	d101      	bne.n	d485c <_ZN7OneWire6searchEPh+0x74>
                LastDeviceFlag = TRUE;
   d4858:	2301      	movs	r3, #1
   d485a:	7323      	strb	r3, [r4, #12]
    if (!search_result || !ROM_NO[0])
   d485c:	78a3      	ldrb	r3, [r4, #2]
   d485e:	2b00      	cmp	r3, #0
   d4860:	d0cb      	beq.n	d47fa <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
   d4862:	2001      	movs	r0, #1
   d4864:	e7cc      	b.n	d4800 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
   d4866:	4287      	cmp	r7, r0
   d4868:	eb04 030a 	add.w	r3, r4, sl
   d486c:	d10c      	bne.n	d4888 <_ZN7OneWire6searchEPh+0xa0>
                    if (id_bit_number < LastDiscrepancy)
   d486e:	7aa2      	ldrb	r2, [r4, #10]
   d4870:	42aa      	cmp	r2, r5
   d4872:	d90e      	bls.n	d4892 <_ZN7OneWire6searchEPh+0xaa>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4874:	789a      	ldrb	r2, [r3, #2]
   d4876:	4216      	tst	r6, r2
   d4878:	bf14      	ite	ne
   d487a:	2701      	movne	r7, #1
   d487c:	2700      	moveq	r7, #0
                    if (search_direction == 0)
   d487e:	b967      	cbnz	r7, d489a <_ZN7OneWire6searchEPh+0xb2>
                        if (last_zero < 9)
   d4880:	2d08      	cmp	r5, #8
   d4882:	d800      	bhi.n	d4886 <_ZN7OneWire6searchEPh+0x9e>
                            LastFamilyDiscrepancy = last_zero;
   d4884:	72e5      	strb	r5, [r4, #11]
                if (search_direction == 1)
   d4886:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4888:	789a      	ldrb	r2, [r3, #2]
   d488a:	ea22 0206 	bic.w	r2, r2, r6
   d488e:	709a      	strb	r2, [r3, #2]
   d4890:	e009      	b.n	d48a6 <_ZN7OneWire6searchEPh+0xbe>
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4892:	bf0c      	ite	eq
   d4894:	2701      	moveq	r7, #1
   d4896:	2700      	movne	r7, #0
   d4898:	e7f1      	b.n	d487e <_ZN7OneWire6searchEPh+0x96>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
   d489a:	eb04 020a 	add.w	r2, r4, sl
   d489e:	2701      	movs	r7, #1
   d48a0:	7893      	ldrb	r3, [r2, #2]
   d48a2:	4333      	orrs	r3, r6
   d48a4:	7093      	strb	r3, [r2, #2]
                write_bit(search_direction);
   d48a6:	4639      	mov	r1, r7
   d48a8:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
   d48aa:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
   d48ac:	f7ff ff03 	bl	d46b6 <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
   d48b0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
   d48b4:	bf04      	itt	eq
   d48b6:	f10a 0a01 	addeq.w	sl, sl, #1
   d48ba:	fa5f fa8a 	uxtbeq.w	sl, sl
                id_bit_number++;
   d48be:	f105 0501 	add.w	r5, r5, #1
                    rom_byte_mask = 1;
   d48c2:	bf08      	it	eq
   d48c4:	2601      	moveq	r6, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d48c6:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
   d48ca:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
   d48cc:	d9b2      	bls.n	d4834 <_ZN7OneWire6searchEPh+0x4c>
   d48ce:	e7bc      	b.n	d484a <_ZN7OneWire6searchEPh+0x62>

000d48d0 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
   d48d0:	b530      	push	{r4, r5, lr}
   d48d2:	4602      	mov	r2, r0
    uint8_t crc = 0;
   d48d4:	4401      	add	r1, r0
   d48d6:	2000      	movs	r0, #0

    while (len--)
   d48d8:	428a      	cmp	r2, r1
   d48da:	d013      	beq.n	d4904 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
   d48dc:	f812 5b01 	ldrb.w	r5, [r2], #1
   d48e0:	2408      	movs	r4, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d48e2:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
   d48e6:	f013 0f01 	tst.w	r3, #1
   d48ea:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
   d48ee:	bf1c      	itt	ne
   d48f0:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d48f4:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
   d48f6:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
   d48f8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
   d48fc:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
   d4900:	d1ef      	bne.n	d48e2 <_ZN7OneWire4crc8EPhh+0x12>
   d4902:	e7e9      	b.n	d48d8 <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
   d4904:	bd30      	pop	{r4, r5, pc}
	...

000d4908 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <os_mutex_recursive_create+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030248 	.word	0x00030248

000d4918 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <os_mutex_recursive_destroy+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030248 	.word	0x00030248

000d4928 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_RNG_GetRandomNumber+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	685b      	ldr	r3, [r3, #4]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030218 	.word	0x00030218

000d4938 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_Delay_Microseconds+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	68db      	ldr	r3, [r3, #12]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030218 	.word	0x00030218

000d4948 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	695b      	ldr	r3, [r3, #20]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030218 	.word	0x00030218

000d4958 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_disable_irq+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030218 	.word	0x00030218

000d4968 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <HAL_enable_irq+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030218 	.word	0x00030218

000d4978 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <HAL_Pin_Map+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	681b      	ldr	r3, [r3, #0]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003022c 	.word	0x0003022c

000d4988 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <HAL_Pin_Mode+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	689b      	ldr	r3, [r3, #8]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003022c 	.word	0x0003022c

000d4998 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <HAL_Interrupts_Enable_All+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6a1b      	ldr	r3, [r3, #32]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003022c 	.word	0x0003022c

000d49a8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <HAL_Interrupts_Disable_All+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	0003022c 	.word	0x0003022c

000d49b8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <hal_i2c_write+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	6a1b      	ldr	r3, [r3, #32]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030228 	.word	0x00030228

000d49c8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <hal_i2c_available+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030228 	.word	0x00030228

000d49d8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <hal_i2c_read+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030228 	.word	0x00030228

000d49e8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <hal_i2c_peek+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030228 	.word	0x00030228

000d49f8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <hal_i2c_flush+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030228 	.word	0x00030228

000d4a08 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <hal_i2c_is_enabled+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030228 	.word	0x00030228

000d4a18 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <hal_i2c_init+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030228 	.word	0x00030228

000d4a28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <inet_inet_ntop+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	695b      	ldr	r3, [r3, #20]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030264 	.word	0x00030264

000d4a38 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <netdb_freeaddrinfo+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	689b      	ldr	r3, [r3, #8]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030268 	.word	0x00030268

000d4a48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <netdb_getaddrinfo+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	68db      	ldr	r3, [r3, #12]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030268 	.word	0x00030268

000d4a58 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <hal_spi_init+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	69db      	ldr	r3, [r3, #28]
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030230 	.word	0x00030230

000d4a68 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <hal_spi_is_enabled+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	6a1b      	ldr	r3, [r3, #32]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030230 	.word	0x00030230

000d4a78 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <hal_usart_init+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	681b      	ldr	r3, [r3, #0]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003023c 	.word	0x0003023c

000d4a88 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <hal_usart_write+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	68db      	ldr	r3, [r3, #12]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003023c 	.word	0x0003023c

000d4a98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <hal_usart_available+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	691b      	ldr	r3, [r3, #16]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003023c 	.word	0x0003023c

000d4aa8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <hal_usart_read+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	695b      	ldr	r3, [r3, #20]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003023c 	.word	0x0003023c

000d4ab8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <hal_usart_peek+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	699b      	ldr	r3, [r3, #24]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003023c 	.word	0x0003023c

000d4ac8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <hal_usart_flush+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	69db      	ldr	r3, [r3, #28]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003023c 	.word	0x0003023c

000d4ad8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <hal_usart_is_enabled+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	6a1b      	ldr	r3, [r3, #32]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003023c 	.word	0x0003023c

000d4ae8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <hal_usart_available_data_for_write+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003023c 	.word	0x0003023c

000d4af8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USB_USART_Init+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	681b      	ldr	r3, [r3, #0]
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003024c 	.word	0x0003024c

000d4b08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USB_USART_Begin+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	685b      	ldr	r3, [r3, #4]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003024c 	.word	0x0003024c

000d4b18 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_USB_USART_Available_Data+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	691b      	ldr	r3, [r3, #16]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	0003024c 	.word	0x0003024c

000d4b28 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	695b      	ldr	r3, [r3, #20]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003024c 	.word	0x0003024c

000d4b38 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_USB_USART_Receive_Data+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	699b      	ldr	r3, [r3, #24]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003024c 	.word	0x0003024c

000d4b48 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <HAL_USB_USART_Send_Data+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	69db      	ldr	r3, [r3, #28]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003024c 	.word	0x0003024c

000d4b58 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <HAL_USB_USART_Flush_Data+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	6a1b      	ldr	r3, [r3, #32]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003024c 	.word	0x0003024c

000d4b68 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <panic_+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	00030260 	.word	0x00030260

000d4b78 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <set_system_mode+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	685b      	ldr	r3, [r3, #4]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	00030220 	.word	0x00030220

000d4b88 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <system_delay_ms+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	695b      	ldr	r3, [r3, #20]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030220 	.word	0x00030220

000d4b98 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <application_thread_current+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030220 	.word	0x00030220

000d4ba8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <application_thread_invoke+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030220 	.word	0x00030220

000d4bb8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b03      	ldr	r3, [pc, #12]	; (d4bc8 <system_ctrl_set_app_request_handler+0x10>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4bc2:	9301      	str	r3, [sp, #4]
   d4bc4:	bd08      	pop	{r3, pc}
   d4bc6:	0000      	.short	0x0000
   d4bc8:	00030220 	.word	0x00030220

000d4bcc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b03      	ldr	r3, [pc, #12]	; (d4bdc <system_ctrl_set_result+0x10>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bd6:	9301      	str	r3, [sp, #4]
   d4bd8:	bd08      	pop	{r3, pc}
   d4bda:	0000      	.short	0x0000
   d4bdc:	00030220 	.word	0x00030220

000d4be0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <spark_cloud_flag_connected+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	695b      	ldr	r3, [r3, #20]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030244 	.word	0x00030244

000d4bf0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <spark_send_event+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	6a1b      	ldr	r3, [r3, #32]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030244 	.word	0x00030244

000d4c00 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030244 	.word	0x00030244

000d4c10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <network_connect+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	685b      	ldr	r3, [r3, #4]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030240 	.word	0x00030240

000d4c20 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <network_connecting+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	689b      	ldr	r3, [r3, #8]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030240 	.word	0x00030240

000d4c30 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <network_disconnect+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	68db      	ldr	r3, [r3, #12]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030240 	.word	0x00030240

000d4c40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <network_ready+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	691b      	ldr	r3, [r3, #16]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030240 	.word	0x00030240

000d4c50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <network_on+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	695b      	ldr	r3, [r3, #20]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030240 	.word	0x00030240

000d4c60 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <network_off+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	699b      	ldr	r3, [r3, #24]
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030240 	.word	0x00030240

000d4c70 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <network_listen+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	69db      	ldr	r3, [r3, #28]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030240 	.word	0x00030240

000d4c80 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_listening+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6a1b      	ldr	r3, [r3, #32]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_set_listen_timeout+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <network_get_listen_timeout+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030240 	.word	0x00030240

000d4cb0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <network_is_on+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030240 	.word	0x00030240

000d4cc0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <network_is_off+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030240 	.word	0x00030240

000d4cd0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <malloc+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	681b      	ldr	r3, [r3, #0]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	0003021c 	.word	0x0003021c

000d4ce0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <free+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	685b      	ldr	r3, [r3, #4]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	0003021c 	.word	0x0003021c

000d4cf0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <realloc+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	689b      	ldr	r3, [r3, #8]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	0003021c 	.word	0x0003021c

000d4d00 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <vsnprintf+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	0003021c 	.word	0x0003021c

000d4d10 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <abort+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	0003021c 	.word	0x0003021c

000d4d20 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <_malloc_r+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	0003021c 	.word	0x0003021c

000d4d30 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <newlib_impure_ptr_callback+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	0003021c 	.word	0x0003021c

000d4d40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d40:	2100      	movs	r1, #0
   d4d42:	f7ff bf21 	b.w	d4b88 <system_delay_ms>

000d4d46 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4d46:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4d48:	6883      	ldr	r3, [r0, #8]
   d4d4a:	4604      	mov	r4, r0
   d4d4c:	b90b      	cbnz	r3, d4d52 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4d4e:	f001 f89a 	bl	d5e86 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4d52:	68c3      	ldr	r3, [r0, #12]
   d4d54:	4798      	blx	r3
      if (_M_manager)
   d4d56:	68a3      	ldr	r3, [r4, #8]
   d4d58:	b11b      	cbz	r3, d4d62 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d5a:	2203      	movs	r2, #3
   d4d5c:	4621      	mov	r1, r4
   d4d5e:	4620      	mov	r0, r4
   d4d60:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4d62:	4620      	mov	r0, r4
   d4d64:	2110      	movs	r1, #16
}
   d4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4d6a:	f001 b888 	b.w	d5e7e <_ZdlPvj>

000d4d6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d6e:	b510      	push	{r4, lr}
          _M_dispose();
   d4d70:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d72:	4604      	mov	r4, r0
          _M_dispose();
   d4d74:	689b      	ldr	r3, [r3, #8]
   d4d76:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d78:	68a3      	ldr	r3, [r4, #8]
   d4d7a:	3b01      	subs	r3, #1
   d4d7c:	60a3      	str	r3, [r4, #8]
   d4d7e:	b92b      	cbnz	r3, d4d8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4d80:	6823      	ldr	r3, [r4, #0]
   d4d82:	4620      	mov	r0, r4
   d4d84:	68db      	ldr	r3, [r3, #12]
    }
   d4d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4d8a:	4718      	bx	r3
    }
   d4d8c:	bd10      	pop	{r4, pc}

000d4d8e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d8e:	b510      	push	{r4, lr}
   d4d90:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d92:	6800      	ldr	r0, [r0, #0]
   d4d94:	b108      	cbz	r0, d4d9a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d96:	f7ff fdbf 	bl	d4918 <os_mutex_recursive_destroy>
    }
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	bd10      	pop	{r4, pc}

000d4d9e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4d9e:	b510      	push	{r4, lr}
      if (_M_manager)
   d4da0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4da2:	4604      	mov	r4, r0
      if (_M_manager)
   d4da4:	b113      	cbz	r3, d4dac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4da6:	2203      	movs	r2, #3
   d4da8:	4601      	mov	r1, r0
   d4daa:	4798      	blx	r3
    }
   d4dac:	4620      	mov	r0, r4
   d4dae:	bd10      	pop	{r4, pc}

000d4db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4db0:	680b      	ldr	r3, [r1, #0]
   d4db2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4db4:	b113      	cbz	r3, d4dbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4db6:	685a      	ldr	r2, [r3, #4]
   d4db8:	3201      	adds	r2, #1
   d4dba:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4dbc:	4770      	bx	lr

000d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4dbe:	b510      	push	{r4, lr}
   d4dc0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4dc2:	6800      	ldr	r0, [r0, #0]
   d4dc4:	b128      	cbz	r0, d4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4dc6:	6843      	ldr	r3, [r0, #4]
   d4dc8:	3b01      	subs	r3, #1
   d4dca:	6043      	str	r3, [r0, #4]
   d4dcc:	b90b      	cbnz	r3, d4dd2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4dce:	f7ff ffce 	bl	d4d6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	bd10      	pop	{r4, pc}

000d4dd6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4dd6:	b513      	push	{r0, r1, r4, lr}
   d4dd8:	460b      	mov	r3, r1
   d4dda:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ddc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4de0:	466c      	mov	r4, sp
   d4de2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4de6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4dea:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4dee:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4df2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4df6:	b002      	add	sp, #8
   d4df8:	bd10      	pop	{r4, pc}
	...

000d4dfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4dfc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4dfe:	4c06      	ldr	r4, [pc, #24]	; (d4e18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e00:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4e02:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4e04:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4e06:	f7ff fd7f 	bl	d4908 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	4a03      	ldr	r2, [pc, #12]	; (d4e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e0e:	4904      	ldr	r1, [pc, #16]	; (d4e20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4e14:	f001 b82e 	b.w	d5e74 <__aeabi_atexit>
   d4e18:	2003e61c 	.word	0x2003e61c
   d4e1c:	2003e5d4 	.word	0x2003e5d4
   d4e20:	000d4d8f 	.word	0x000d4d8f

000d4e24 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4e24:	2200      	movs	r2, #0
   d4e26:	6840      	ldr	r0, [r0, #4]
   d4e28:	4611      	mov	r1, r2
   d4e2a:	f7ff bf09 	b.w	d4c40 <network_ready>

000d4e2e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4e2e:	2200      	movs	r2, #0
   d4e30:	6840      	ldr	r0, [r0, #4]
   d4e32:	4611      	mov	r1, r2
   d4e34:	f7ff bf24 	b.w	d4c80 <network_listening>

000d4e38 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4e38:	2200      	movs	r2, #0
   d4e3a:	6840      	ldr	r0, [r0, #4]
   d4e3c:	4611      	mov	r1, r2
   d4e3e:	f7ff bf2f 	b.w	d4ca0 <network_get_listen_timeout>

000d4e42 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4e42:	6840      	ldr	r0, [r0, #4]
   d4e44:	2200      	movs	r2, #0
   d4e46:	f7ff bf23 	b.w	d4c90 <network_set_listen_timeout>

000d4e4a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	2200      	movs	r2, #0
   d4e4e:	f081 0101 	eor.w	r1, r1, #1
   d4e52:	f7ff bf0d 	b.w	d4c70 <network_listen>

000d4e56 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4e56:	2300      	movs	r3, #0
   d4e58:	6840      	ldr	r0, [r0, #4]
   d4e5a:	461a      	mov	r2, r3
   d4e5c:	4619      	mov	r1, r3
   d4e5e:	f7ff beff 	b.w	d4c60 <network_off>

000d4e62 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4e62:	2300      	movs	r3, #0
   d4e64:	6840      	ldr	r0, [r0, #4]
   d4e66:	461a      	mov	r2, r3
   d4e68:	4619      	mov	r1, r3
   d4e6a:	f7ff bef1 	b.w	d4c50 <network_on>

000d4e6e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4e6e:	2200      	movs	r2, #0
   d4e70:	6840      	ldr	r0, [r0, #4]
   d4e72:	4611      	mov	r1, r2
   d4e74:	f7ff bed4 	b.w	d4c20 <network_connecting>

000d4e78 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e78:	6840      	ldr	r0, [r0, #4]
   d4e7a:	2200      	movs	r2, #0
   d4e7c:	2102      	movs	r1, #2
   d4e7e:	f7ff bed7 	b.w	d4c30 <network_disconnect>

000d4e82 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4e82:	2300      	movs	r3, #0
   d4e84:	6840      	ldr	r0, [r0, #4]
   d4e86:	461a      	mov	r2, r3
   d4e88:	f7ff bec2 	b.w	d4c10 <network_connect>

000d4e8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4e8c:	4b08      	ldr	r3, [pc, #32]	; (d4eb0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4e8e:	b510      	push	{r4, lr}
   d4e90:	2428      	movs	r4, #40	; 0x28
   d4e92:	4622      	mov	r2, r4
   d4e94:	4618      	mov	r0, r3
   d4e96:	2100      	movs	r1, #0
   d4e98:	f001 fc32 	bl	d6700 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e9c:	4b05      	ldr	r3, [pc, #20]	; (d4eb4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d4e9e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4ea4:	6042      	str	r2, [r0, #4]
   d4ea6:	2204      	movs	r2, #4
   d4ea8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4eaa:	4a03      	ldr	r2, [pc, #12]	; (d4eb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4eac:	601a      	str	r2, [r3, #0]
   d4eae:	bd10      	pop	{r4, pc}
   d4eb0:	2003e628 	.word	0x2003e628
   d4eb4:	2003e620 	.word	0x2003e620
   d4eb8:	000d6804 	.word	0x000d6804

000d4ebc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ebc:	4770      	bx	lr

000d4ebe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4ebe:	2000      	movs	r0, #0
   d4ec0:	4770      	bx	lr

000d4ec2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ec2:	b510      	push	{r4, lr}
   d4ec4:	2110      	movs	r1, #16
   d4ec6:	4604      	mov	r4, r0
   d4ec8:	f000 ffd9 	bl	d5e7e <_ZdlPvj>
   d4ecc:	4620      	mov	r0, r4
   d4ece:	bd10      	pop	{r4, pc}

000d4ed0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4ed0:	b508      	push	{r3, lr}
      { delete this; }
   d4ed2:	f7ff fff6 	bl	d4ec2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ed6:	bd08      	pop	{r3, pc}

000d4ed8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4ed8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4eda:	2200      	movs	r2, #0
   d4edc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4ee0:	6002      	str	r2, [r0, #0]
   d4ee2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ee4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ee6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4ee8:	680c      	ldr	r4, [r1, #0]
   d4eea:	8085      	strh	r5, [r0, #4]
   d4eec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4eee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4ef0:	bd30      	pop	{r4, r5, pc}

000d4ef2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4ef2:	b510      	push	{r4, lr}
   d4ef4:	4604      	mov	r4, r0
    free((void*)msg_);
   d4ef6:	6800      	ldr	r0, [r0, #0]
   d4ef8:	f7ff fef2 	bl	d4ce0 <free>
}
   d4efc:	4620      	mov	r0, r4
   d4efe:	bd10      	pop	{r4, pc}

000d4f00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4f00:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f02:	68c4      	ldr	r4, [r0, #12]
   d4f04:	b1f4      	cbz	r4, d4f44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4f06:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4f08:	2b02      	cmp	r3, #2
   d4f0a:	d103      	bne.n	d4f14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4f0c:	f104 000c 	add.w	r0, r4, #12
   d4f10:	f7ff ffef 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4f14:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4f16:	b135      	cbz	r5, d4f26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4f18:	4628      	mov	r0, r5
   d4f1a:	f7ff ff40 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
   d4f1e:	2110      	movs	r1, #16
   d4f20:	4628      	mov	r0, r5
   d4f22:	f000 ffac 	bl	d5e7e <_ZdlPvj>
   d4f26:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4f28:	b135      	cbz	r5, d4f38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4f2a:	4628      	mov	r0, r5
   d4f2c:	f7ff ff37 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
   d4f30:	2110      	movs	r1, #16
   d4f32:	4628      	mov	r0, r5
   d4f34:	f000 ffa3 	bl	d5e7e <_ZdlPvj>
   d4f38:	4620      	mov	r0, r4
   d4f3a:	2114      	movs	r1, #20
   d4f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4f40:	f000 bf9d 	b.w	d5e7e <_ZdlPvj>
   d4f44:	bd38      	pop	{r3, r4, r5, pc}

000d4f46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f48:	460e      	mov	r6, r1
   d4f4a:	4604      	mov	r4, r0
   d4f4c:	f856 3b04 	ldr.w	r3, [r6], #4
   d4f50:	9300      	str	r3, [sp, #0]
   d4f52:	460d      	mov	r5, r1
   d4f54:	a801      	add	r0, sp, #4
   d4f56:	4631      	mov	r1, r6
   d4f58:	f7ff ff2a 	bl	d4db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f5c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f5e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4f60:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4f62:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4f64:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4f66:	2300      	movs	r3, #0
   d4f68:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4f6a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4f6c:	f7ff ff27 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f70:	4630      	mov	r0, r6
   d4f72:	f7ff ff24 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4f76:	4628      	mov	r0, r5
   d4f78:	2108      	movs	r1, #8
   d4f7a:	f000 ff80 	bl	d5e7e <_ZdlPvj>
        return p;
    }
   d4f7e:	4620      	mov	r0, r4
   d4f80:	b002      	add	sp, #8
   d4f82:	bd70      	pop	{r4, r5, r6, pc}

000d4f84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4f84:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4f86:	b510      	push	{r4, lr}
      if (_M_empty())
   d4f88:	b90a      	cbnz	r2, d4f8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f8a:	f000 ff7c 	bl	d5e86 <_ZSt25__throw_bad_function_callv>
    }
   d4f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f92:	68c3      	ldr	r3, [r0, #12]
   d4f94:	4718      	bx	r3

000d4f96 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f96:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4f98:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4f9a:	f100 0110 	add.w	r1, r0, #16
   d4f9e:	f7ff fff1 	bl	d4f84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4fa2:	bd08      	pop	{r3, pc}

000d4fa4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4fa4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4fa6:	b510      	push	{r4, lr}
      if (_M_empty())
   d4fa8:	b90a      	cbnz	r2, d4fae <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4faa:	f000 ff6c 	bl	d5e86 <_ZSt25__throw_bad_function_callv>
    }
   d4fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fb2:	68c3      	ldr	r3, [r0, #12]
   d4fb4:	4718      	bx	r3

000d4fb6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4fb6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4fb8:	6800      	ldr	r0, [r0, #0]
   d4fba:	f100 0110 	add.w	r1, r0, #16
   d4fbe:	f7ff fff1 	bl	d4fa4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4fc2:	bd08      	pop	{r3, pc}

000d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fc4:	b538      	push	{r3, r4, r5, lr}
   d4fc6:	2300      	movs	r3, #0
   d4fc8:	4604      	mov	r4, r0
   d4fca:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fcc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4fce:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fd0:	f7ff f861 	bl	d4096 <_Znwj>
   d4fd4:	b128      	cbz	r0, d4fe2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4fd6:	2301      	movs	r3, #1
   d4fd8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4fdc:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4fde:	6003      	str	r3, [r0, #0]
   d4fe0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4fe2:	6020      	str	r0, [r4, #0]
	}
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bd38      	pop	{r3, r4, r5, pc}
   d4fe8:	000d6840 	.word	0x000d6840

000d4fec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4fec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4fee:	2300      	movs	r3, #0
   d4ff0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4ff2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4ff4:	4604      	mov	r4, r0
   d4ff6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4ff8:	b12b      	cbz	r3, d5006 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ffa:	2202      	movs	r2, #2
   d4ffc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ffe:	68eb      	ldr	r3, [r5, #12]
   d5000:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5002:	68ab      	ldr	r3, [r5, #8]
   d5004:	60a3      	str	r3, [r4, #8]
    }
   d5006:	4620      	mov	r0, r4
   d5008:	bd38      	pop	{r3, r4, r5, pc}
	...

000d500c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d500c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d500e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5010:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5012:	4668      	mov	r0, sp
   d5014:	f7ff ff60 	bl	d4ed8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5018:	f04f 0302 	mov.w	r3, #2
   d501c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5020:	2a00      	cmp	r2, #0
   d5022:	d103      	bne.n	d502c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5024:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5028:	2900      	cmp	r1, #0
   d502a:	d1f7      	bne.n	d501c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d502c:	d125      	bne.n	d507a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d502e:	f104 050c 	add.w	r5, r4, #12
   d5032:	4669      	mov	r1, sp
   d5034:	4628      	mov	r0, r5
   d5036:	f7ff ff4f 	bl	d4ed8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d503a:	f3bf 8f5b 	dmb	ish
   d503e:	2301      	movs	r3, #1
   d5040:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5042:	2000      	movs	r0, #0
   d5044:	f104 0308 	add.w	r3, r4, #8
   d5048:	f3bf 8f5b 	dmb	ish
   d504c:	e853 6f00 	ldrex	r6, [r3]
   d5050:	e843 0200 	strex	r2, r0, [r3]
   d5054:	2a00      	cmp	r2, #0
   d5056:	d1f9      	bne.n	d504c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5058:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d505c:	b16e      	cbz	r6, d507a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d505e:	f7ff fd9b 	bl	d4b98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5062:	b178      	cbz	r0, d5084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5064:	4629      	mov	r1, r5
   d5066:	4630      	mov	r0, r6
   d5068:	f7ff ff8c 	bl	d4f84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d506c:	4630      	mov	r0, r6
   d506e:	f7ff fe96 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5072:	2110      	movs	r1, #16
   d5074:	4630      	mov	r0, r6
   d5076:	f000 ff02 	bl	d5e7e <_ZdlPvj>
        p_->setError(std::move(error));
   d507a:	4668      	mov	r0, sp
   d507c:	f7ff ff39 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
    }
   d5080:	b009      	add	sp, #36	; 0x24
   d5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5084:	4631      	mov	r1, r6
   d5086:	a802      	add	r0, sp, #8
   d5088:	f7ff ffb0 	bl	d4fec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d508c:	68e0      	ldr	r0, [r4, #12]
   d508e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5092:	b108      	cbz	r0, d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5094:	f001 fb60 	bl	d6758 <strdup>
        type_(type) {
   d5098:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d509a:	2010      	movs	r0, #16
   d509c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d50a0:	f7fe fff9 	bl	d4096 <_Znwj>
   d50a4:	4605      	mov	r5, r0
   d50a6:	b1e8      	cbz	r0, d50e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d50a8:	2700      	movs	r7, #0
   d50aa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50ac:	2018      	movs	r0, #24
   d50ae:	f7fe fff2 	bl	d4096 <_Znwj>
   d50b2:	4604      	mov	r4, r0
   d50b4:	b188      	cbz	r0, d50da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d50b6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d50b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d50ba:	a802      	add	r0, sp, #8
   d50bc:	f7ff fe8b 	bl	d4dd6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50c0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d50c2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d50c4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50c6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d50c8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d50ca:	a906      	add	r1, sp, #24
   d50cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d50ce:	60e3      	str	r3, [r4, #12]
   d50d0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d50d4:	9205      	str	r2, [sp, #20]
   d50d6:	f7ff feff 	bl	d4ed8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d50da:	4b08      	ldr	r3, [pc, #32]	; (d50fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d50dc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d50de:	4b08      	ldr	r3, [pc, #32]	; (d5100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d50e0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d50e2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d50e4:	a806      	add	r0, sp, #24
   d50e6:	f7ff ff04 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d50ea:	a802      	add	r0, sp, #8
   d50ec:	f7ff fe57 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d50f0:	2200      	movs	r2, #0
   d50f2:	4629      	mov	r1, r5
   d50f4:	4803      	ldr	r0, [pc, #12]	; (d5104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d50f6:	f7ff fd57 	bl	d4ba8 <application_thread_invoke>
   d50fa:	e7b7      	b.n	d506c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d50fc:	000d4f97 	.word	0x000d4f97
   d5100:	000d522d 	.word	0x000d522d
   d5104:	000d4d47 	.word	0x000d4d47

000d5108 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d510c:	b08a      	sub	sp, #40	; 0x28
   d510e:	4605      	mov	r5, r0
   d5110:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5114:	460c      	mov	r4, r1
   d5116:	4617      	mov	r7, r2
   d5118:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d511a:	f7ff fd61 	bl	d4be0 <spark_cloud_flag_connected>
   d511e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5120:	4682      	mov	sl, r0
   d5122:	bb38      	cbnz	r0, d5174 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5124:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5128:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d512a:	a905      	add	r1, sp, #20
   d512c:	4630      	mov	r0, r6
   d512e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5132:	f7ff fed1 	bl	d4ed8 <_ZN8particle5ErrorC1EOS0_>
   d5136:	2014      	movs	r0, #20
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
   d513c:	4604      	mov	r4, r0
   d513e:	b148      	cbz	r0, d5154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5140:	2302      	movs	r3, #2
   d5142:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5144:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5146:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d514a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d514c:	4631      	mov	r1, r6
   d514e:	300c      	adds	r0, #12
   d5150:	f7ff fec2 	bl	d4ed8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5154:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5156:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5158:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d515c:	f7ff ff32 	bl	d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5160:	4630      	mov	r0, r6
   d5162:	f7ff fec6 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5166:	a805      	add	r0, sp, #20
   d5168:	f7ff fec3 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d516c:	4628      	mov	r0, r5
   d516e:	b00a      	add	sp, #40	; 0x28
   d5170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5174:	230c      	movs	r3, #12
   d5176:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d517a:	2014      	movs	r0, #20
   d517c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5180:	9307      	str	r3, [sp, #28]
   d5182:	f7fe ff88 	bl	d4096 <_Znwj>
   d5186:	4601      	mov	r1, r0
   d5188:	b128      	cbz	r0, d5196 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d518a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d518e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5192:	f880 a001 	strb.w	sl, [r0, #1]
   d5196:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5198:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d519a:	f7ff ff13 	bl	d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d519e:	4b22      	ldr	r3, [pc, #136]	; (d5228 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d51a0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d51a2:	2008      	movs	r0, #8
   d51a4:	f7fe ff77 	bl	d4096 <_Znwj>
   d51a8:	4682      	mov	sl, r0
   d51aa:	b128      	cbz	r0, d51b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51ac:	9b03      	ldr	r3, [sp, #12]
   d51ae:	f840 3b04 	str.w	r3, [r0], #4
   d51b2:	a904      	add	r1, sp, #16
   d51b4:	f7ff fdfc 	bl	d4db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51b8:	9600      	str	r6, [sp, #0]
   d51ba:	fa5f f389 	uxtb.w	r3, r9
   d51be:	4642      	mov	r2, r8
   d51c0:	4639      	mov	r1, r7
   d51c2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d51c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d51c8:	f7ff fd12 	bl	d4bf0 <spark_send_event>
   d51cc:	b9b8      	cbnz	r0, d51fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d51ce:	9b03      	ldr	r3, [sp, #12]
   d51d0:	785b      	ldrb	r3, [r3, #1]
   d51d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d51d6:	b993      	cbnz	r3, d51fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d51d8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d51dc:	a905      	add	r1, sp, #20
   d51de:	a803      	add	r0, sp, #12
   d51e0:	9205      	str	r2, [sp, #20]
   d51e2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51e6:	f7ff ff11 	bl	d500c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51ea:	a805      	add	r0, sp, #20
   d51ec:	f7ff fe81 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d51f0:	a805      	add	r0, sp, #20
   d51f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d51f4:	f7ff fea7 	bl	d4f46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d51f8:	a806      	add	r0, sp, #24
   d51fa:	f7ff fde0 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51fe:	9b03      	ldr	r3, [sp, #12]
   d5200:	9305      	str	r3, [sp, #20]
   d5202:	a904      	add	r1, sp, #16
   d5204:	a806      	add	r0, sp, #24
   d5206:	f7ff fdd3 	bl	d4db0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d520a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d520c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d520e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5210:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5212:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5214:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5216:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5218:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d521a:	f7ff fdd0 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d521e:	a804      	add	r0, sp, #16
   d5220:	f7ff fdcd 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5224:	e7a2      	b.n	d516c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5226:	bf00      	nop
   d5228:	000d52f1 	.word	0x000d52f1

000d522c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d522c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d522e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5230:	4605      	mov	r5, r0
	  switch (__op)
   d5232:	d007      	beq.n	d5244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5234:	2a03      	cmp	r2, #3
   d5236:	d018      	beq.n	d526a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5238:	2a01      	cmp	r2, #1
   d523a:	d101      	bne.n	d5240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d523c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d523e:	6003      	str	r3, [r0, #0]
	}
   d5240:	2000      	movs	r0, #0
   d5242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5244:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5246:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5248:	f7fe ff25 	bl	d4096 <_Znwj>
   d524c:	4604      	mov	r4, r0
   d524e:	b150      	cbz	r0, d5266 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5250:	4631      	mov	r1, r6
   d5252:	f7ff fecb 	bl	d4fec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5256:	6930      	ldr	r0, [r6, #16]
   d5258:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d525c:	b108      	cbz	r0, d5262 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d525e:	f001 fa7b 	bl	d6758 <strdup>
        type_(type) {
   d5262:	6120      	str	r0, [r4, #16]
   d5264:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5266:	602c      	str	r4, [r5, #0]
	}
   d5268:	e7ea      	b.n	d5240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d526a:	6804      	ldr	r4, [r0, #0]
   d526c:	2c00      	cmp	r4, #0
   d526e:	d0e7      	beq.n	d5240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5270:	f104 0010 	add.w	r0, r4, #16
   d5274:	f7ff fe3d 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5278:	4620      	mov	r0, r4
   d527a:	f7ff fd90 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d527e:	2118      	movs	r1, #24
   d5280:	4620      	mov	r0, r4
   d5282:	f000 fdfc 	bl	d5e7e <_ZdlPvj>
   d5286:	e7db      	b.n	d5240 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5288 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5288:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d528a:	2300      	movs	r3, #0
   d528c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d528e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5290:	4604      	mov	r4, r0
   d5292:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5294:	b12b      	cbz	r3, d52a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5296:	2202      	movs	r2, #2
   d5298:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d529a:	68eb      	ldr	r3, [r5, #12]
   d529c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d529e:	68ab      	ldr	r3, [r5, #8]
   d52a0:	60a3      	str	r3, [r4, #8]
    }
   d52a2:	4620      	mov	r0, r4
   d52a4:	bd38      	pop	{r3, r4, r5, pc}

000d52a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d52a6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52a8:	b570      	push	{r4, r5, r6, lr}
   d52aa:	4604      	mov	r4, r0
	  switch (__op)
   d52ac:	d007      	beq.n	d52be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d52ae:	2a03      	cmp	r2, #3
   d52b0:	d012      	beq.n	d52d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d52b2:	2a01      	cmp	r2, #1
   d52b4:	d101      	bne.n	d52ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d52b6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d52b8:	6003      	str	r3, [r0, #0]
	}
   d52ba:	2000      	movs	r0, #0
   d52bc:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d52be:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d52c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d52c2:	f7fe fee8 	bl	d4096 <_Znwj>
   d52c6:	4605      	mov	r5, r0
   d52c8:	b120      	cbz	r0, d52d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d52ca:	4631      	mov	r1, r6
   d52cc:	f7ff ffdc 	bl	d5288 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d52d0:	7c33      	ldrb	r3, [r6, #16]
   d52d2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d52d4:	6025      	str	r5, [r4, #0]
	}
   d52d6:	e7f0      	b.n	d52ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d52d8:	6804      	ldr	r4, [r0, #0]
   d52da:	2c00      	cmp	r4, #0
   d52dc:	d0ed      	beq.n	d52ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d52de:	4620      	mov	r0, r4
   d52e0:	f7ff fd5d 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d52e4:	2114      	movs	r1, #20
   d52e6:	4620      	mov	r0, r4
   d52e8:	f000 fdc9 	bl	d5e7e <_ZdlPvj>
   d52ec:	e7e5      	b.n	d52ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d52f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d52f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d52f2:	b089      	sub	sp, #36	; 0x24
   d52f4:	4604      	mov	r4, r0
   d52f6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d52f8:	a801      	add	r0, sp, #4
   d52fa:	4611      	mov	r1, r2
   d52fc:	f7ff fe23 	bl	d4f46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5300:	b1a4      	cbz	r4, d532c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5302:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5304:	b11d      	cbz	r5, d530e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5306:	4628      	mov	r0, r5
   d5308:	f001 fa26 	bl	d6758 <strdup>
   d530c:	4605      	mov	r5, r0
   d530e:	a801      	add	r0, sp, #4
   d5310:	a903      	add	r1, sp, #12
        type_(type) {
   d5312:	9503      	str	r5, [sp, #12]
   d5314:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5318:	f7ff fe78 	bl	d500c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d531c:	a803      	add	r0, sp, #12
   d531e:	f7ff fde8 	bl	d4ef2 <_ZN8particle5ErrorD1Ev>
   d5322:	a802      	add	r0, sp, #8
   d5324:	f7ff fd4b 	bl	d4dbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5328:	b009      	add	sp, #36	; 0x24
   d532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d532c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d532e:	2301      	movs	r3, #1
   d5330:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5334:	2a00      	cmp	r2, #0
   d5336:	d103      	bne.n	d5340 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5338:	e8c5 3f41 	strexb	r1, r3, [r5]
   d533c:	2900      	cmp	r1, #0
   d533e:	d1f7      	bne.n	d5330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5340:	d1ef      	bne.n	d5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d5342:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5344:	f3bf 8f5b 	dmb	ish
   d5348:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d534a:	1d2b      	adds	r3, r5, #4
   d534c:	f3bf 8f5b 	dmb	ish
   d5350:	e853 6f00 	ldrex	r6, [r3]
   d5354:	e843 4200 	strex	r2, r4, [r3]
   d5358:	2a00      	cmp	r2, #0
   d535a:	d1f9      	bne.n	d5350 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d535c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5360:	2e00      	cmp	r6, #0
   d5362:	d0de      	beq.n	d5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5364:	4620      	mov	r0, r4
   d5366:	f7ff fc17 	bl	d4b98 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d536a:	4607      	mov	r7, r0
   d536c:	b160      	cbz	r0, d5388 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d536e:	f105 010c 	add.w	r1, r5, #12
   d5372:	4630      	mov	r0, r6
   d5374:	f7ff fe16 	bl	d4fa4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5378:	4630      	mov	r0, r6
   d537a:	f7ff fd10 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d537e:	2110      	movs	r1, #16
   d5380:	4630      	mov	r0, r6
   d5382:	f000 fd7c 	bl	d5e7e <_ZdlPvj>
   d5386:	e7cc      	b.n	d5322 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5388:	4631      	mov	r1, r6
   d538a:	a803      	add	r0, sp, #12
   d538c:	f7ff ff7c 	bl	d5288 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5390:	7b2b      	ldrb	r3, [r5, #12]
   d5392:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5396:	2010      	movs	r0, #16
   d5398:	f7fe fe7d 	bl	d4096 <_Znwj>
   d539c:	4605      	mov	r5, r0
   d539e:	b1d0      	cbz	r0, d53d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d53a0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53a2:	2014      	movs	r0, #20
   d53a4:	f7fe fe77 	bl	d4096 <_Znwj>
   d53a8:	4604      	mov	r4, r0
   d53aa:	b178      	cbz	r0, d53cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d53ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d53ae:	4601      	mov	r1, r0
   d53b0:	a803      	add	r0, sp, #12
   d53b2:	f7ff fd10 	bl	d4dd6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d53b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53ba:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53bc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d53be:	9205      	str	r2, [sp, #20]
   d53c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d53c2:	60e3      	str	r3, [r4, #12]
   d53c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d53c8:	9206      	str	r2, [sp, #24]
   d53ca:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d53cc:	4b06      	ldr	r3, [pc, #24]	; (d53e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d53ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53d0:	4b06      	ldr	r3, [pc, #24]	; (d53ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53d2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d53d4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d53d6:	a803      	add	r0, sp, #12
   d53d8:	f7ff fce1 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d53dc:	2200      	movs	r2, #0
   d53de:	4629      	mov	r1, r5
   d53e0:	4803      	ldr	r0, [pc, #12]	; (d53f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d53e2:	f7ff fbe1 	bl	d4ba8 <application_thread_invoke>
   d53e6:	e7c7      	b.n	d5378 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d53e8:	000d4fb7 	.word	0x000d4fb7
   d53ec:	000d52a7 	.word	0x000d52a7
   d53f0:	000d4d47 	.word	0x000d4d47

000d53f4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53f4:	2200      	movs	r2, #0
   d53f6:	6840      	ldr	r0, [r0, #4]
   d53f8:	4611      	mov	r1, r2
   d53fa:	f7ff bc41 	b.w	d4c80 <network_listening>

000d53fe <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d53fe:	2200      	movs	r2, #0
   d5400:	6840      	ldr	r0, [r0, #4]
   d5402:	4611      	mov	r1, r2
   d5404:	f7ff bc4c 	b.w	d4ca0 <network_get_listen_timeout>

000d5408 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	2200      	movs	r2, #0
   d540c:	f7ff bc40 	b.w	d4c90 <network_set_listen_timeout>

000d5410 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5410:	6840      	ldr	r0, [r0, #4]
   d5412:	2200      	movs	r2, #0
   d5414:	f081 0101 	eor.w	r1, r1, #1
   d5418:	f7ff bc2a 	b.w	d4c70 <network_listen>

000d541c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d541c:	2300      	movs	r3, #0
   d541e:	6840      	ldr	r0, [r0, #4]
   d5420:	461a      	mov	r2, r3
   d5422:	4619      	mov	r1, r3
   d5424:	f7ff bc1c 	b.w	d4c60 <network_off>

000d5428 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5428:	2300      	movs	r3, #0
   d542a:	6840      	ldr	r0, [r0, #4]
   d542c:	461a      	mov	r2, r3
   d542e:	4619      	mov	r1, r3
   d5430:	f7ff bc0e 	b.w	d4c50 <network_on>

000d5434 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5434:	2200      	movs	r2, #0
   d5436:	6840      	ldr	r0, [r0, #4]
   d5438:	4611      	mov	r1, r2
   d543a:	f7ff bc01 	b.w	d4c40 <network_ready>

000d543e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d543e:	2200      	movs	r2, #0
   d5440:	6840      	ldr	r0, [r0, #4]
   d5442:	4611      	mov	r1, r2
   d5444:	f7ff bbec 	b.w	d4c20 <network_connecting>

000d5448 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5448:	6840      	ldr	r0, [r0, #4]
   d544a:	2200      	movs	r2, #0
   d544c:	2102      	movs	r1, #2
   d544e:	f7ff bbef 	b.w	d4c30 <network_disconnect>

000d5452 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5452:	2300      	movs	r3, #0
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	461a      	mov	r2, r3
   d5458:	f7ff bbda 	b.w	d4c10 <network_connect>

000d545c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d545c:	4b02      	ldr	r3, [pc, #8]	; (d5468 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d545e:	2203      	movs	r2, #3
   d5460:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5462:	4a02      	ldr	r2, [pc, #8]	; (d546c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5464:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5466:	4770      	bx	lr
   d5468:	2003e650 	.word	0x2003e650
   d546c:	000d685c 	.word	0x000d685c

000d5470 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5470:	4770      	bx	lr

000d5472 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5474:	4606      	mov	r6, r0
   d5476:	4615      	mov	r5, r2
   d5478:	460c      	mov	r4, r1
   d547a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d547c:	42bc      	cmp	r4, r7
   d547e:	d006      	beq.n	d548e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5480:	6833      	ldr	r3, [r6, #0]
   d5482:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5486:	689b      	ldr	r3, [r3, #8]
   d5488:	4630      	mov	r0, r6
   d548a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d548c:	e7f6      	b.n	d547c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d548e:	4628      	mov	r0, r5
   d5490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5492 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5492:	7c00      	ldrb	r0, [r0, #16]
   d5494:	2200      	movs	r2, #0
   d5496:	f7ff ba8f 	b.w	d49b8 <hal_i2c_write>

000d549a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d549a:	7c00      	ldrb	r0, [r0, #16]
   d549c:	2100      	movs	r1, #0
   d549e:	f7ff ba93 	b.w	d49c8 <hal_i2c_available>

000d54a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d54a2:	7c00      	ldrb	r0, [r0, #16]
   d54a4:	2100      	movs	r1, #0
   d54a6:	f7ff ba97 	b.w	d49d8 <hal_i2c_read>

000d54aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d54aa:	7c00      	ldrb	r0, [r0, #16]
   d54ac:	2100      	movs	r1, #0
   d54ae:	f7ff ba9b 	b.w	d49e8 <hal_i2c_peek>

000d54b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d54b2:	7c00      	ldrb	r0, [r0, #16]
   d54b4:	2100      	movs	r1, #0
   d54b6:	f7ff ba9f 	b.w	d49f8 <hal_i2c_flush>

000d54ba <_ZN7TwoWireD0Ev>:
   d54ba:	b510      	push	{r4, lr}
   d54bc:	2114      	movs	r1, #20
   d54be:	4604      	mov	r4, r0
   d54c0:	f000 fcdd 	bl	d5e7e <_ZdlPvj>
   d54c4:	4620      	mov	r0, r4
   d54c6:	bd10      	pop	{r4, pc}

000d54c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d54c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54ce:	4604      	mov	r4, r0
   d54d0:	4608      	mov	r0, r1
   d54d2:	2100      	movs	r1, #0
   d54d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54d8:	4b03      	ldr	r3, [pc, #12]	; (d54e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d54da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d54dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d54de:	4611      	mov	r1, r2
   d54e0:	f7ff fa9a 	bl	d4a18 <hal_i2c_init>
}
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}
   d54e8:	000d6898 	.word	0x000d6898

000d54ec <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d54ec:	f7ff ba5c 	b.w	d49a8 <HAL_Interrupts_Disable_All>

000d54f0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d54f0:	f7ff ba52 	b.w	d4998 <HAL_Interrupts_Enable_All>

000d54f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54f4:	4770      	bx	lr

000d54f6 <_ZN9IPAddressD0Ev>:
   d54f6:	b510      	push	{r4, lr}
   d54f8:	2118      	movs	r1, #24
   d54fa:	4604      	mov	r4, r0
   d54fc:	f000 fcbf 	bl	d5e7e <_ZdlPvj>
   d5500:	4620      	mov	r0, r4
   d5502:	bd10      	pop	{r4, pc}

000d5504 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5504:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5506:	7d03      	ldrb	r3, [r0, #20]
   d5508:	2b06      	cmp	r3, #6
{
   d550a:	b08d      	sub	sp, #52	; 0x34
   d550c:	460e      	mov	r6, r1
   d550e:	f100 0704 	add.w	r7, r0, #4
   d5512:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5516:	d012      	beq.n	d553e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5518:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d551c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5520:	220a      	movs	r2, #10
   d5522:	4630      	mov	r0, r6
   d5524:	f000 f951 	bl	d57ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5528:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d552a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d552c:	d019      	beq.n	d5562 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d552e:	2c00      	cmp	r4, #0
   d5530:	d0f4      	beq.n	d551c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5532:	212e      	movs	r1, #46	; 0x2e
   d5534:	4630      	mov	r0, r6
   d5536:	f000 f939 	bl	d57ac <_ZN5Print5printEc>
   d553a:	4404      	add	r4, r0
   d553c:	e7ee      	b.n	d551c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d553e:	232f      	movs	r3, #47	; 0x2f
   d5540:	466a      	mov	r2, sp
   d5542:	4639      	mov	r1, r7
   d5544:	200a      	movs	r0, #10
		buf[0] = 0;
   d5546:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d554a:	f7ff fa6d 	bl	d4a28 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d554e:	4668      	mov	r0, sp
   d5550:	f001 f91f 	bl	d6792 <strlen>
   d5554:	6833      	ldr	r3, [r6, #0]
   d5556:	4602      	mov	r2, r0
   d5558:	68db      	ldr	r3, [r3, #12]
   d555a:	4669      	mov	r1, sp
   d555c:	4630      	mov	r0, r6
   d555e:	4798      	blx	r3
   d5560:	4604      	mov	r4, r0
    }
    return n;
}
   d5562:	4620      	mov	r0, r4
   d5564:	b00d      	add	sp, #52	; 0x34
   d5566:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5568 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5568:	b510      	push	{r4, lr}
   d556a:	4b05      	ldr	r3, [pc, #20]	; (d5580 <_ZN9IPAddressC1Ev+0x18>)
   d556c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d556e:	2211      	movs	r2, #17
   d5570:	f840 3b04 	str.w	r3, [r0], #4
   d5574:	2100      	movs	r1, #0
   d5576:	f001 f8c3 	bl	d6700 <memset>
}
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}
   d557e:	bf00      	nop
   d5580:	000d68c0 	.word	0x000d68c0

000d5584 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5584:	4603      	mov	r3, r0
   d5586:	4a07      	ldr	r2, [pc, #28]	; (d55a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5588:	b510      	push	{r4, lr}
   d558a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d558e:	f101 0210 	add.w	r2, r1, #16
   d5592:	f851 4b04 	ldr.w	r4, [r1], #4
   d5596:	f843 4b04 	str.w	r4, [r3], #4
   d559a:	4291      	cmp	r1, r2
   d559c:	d1f9      	bne.n	d5592 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d559e:	780a      	ldrb	r2, [r1, #0]
   d55a0:	701a      	strb	r2, [r3, #0]
}
   d55a2:	bd10      	pop	{r4, pc}
   d55a4:	000d68c0 	.word	0x000d68c0

000d55a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d55a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d55b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d55b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d55ba:	2304      	movs	r3, #4
   d55bc:	6041      	str	r1, [r0, #4]
   d55be:	7503      	strb	r3, [r0, #20]
}
   d55c0:	bd10      	pop	{r4, pc}
	...

000d55c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d55c4:	b513      	push	{r0, r1, r4, lr}
   d55c6:	4b05      	ldr	r3, [pc, #20]	; (d55dc <_ZN9IPAddressC1EPKh+0x18>)
   d55c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d55ca:	78cb      	ldrb	r3, [r1, #3]
   d55cc:	9300      	str	r3, [sp, #0]
   d55ce:	788b      	ldrb	r3, [r1, #2]
   d55d0:	784a      	ldrb	r2, [r1, #1]
   d55d2:	7809      	ldrb	r1, [r1, #0]
   d55d4:	f7ff ffe8 	bl	d55a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d55d8:	b002      	add	sp, #8
   d55da:	bd10      	pop	{r4, pc}
   d55dc:	000d68c0 	.word	0x000d68c0

000d55e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55e0:	4b01      	ldr	r3, [pc, #4]	; (d55e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55e2:	4a02      	ldr	r2, [pc, #8]	; (d55ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d55e6:	4770      	bx	lr
   d55e8:	2003e658 	.word	0x2003e658
   d55ec:	000d68cc 	.word	0x000d68cc

000d55f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d55f0:	2300      	movs	r3, #0
   d55f2:	6840      	ldr	r0, [r0, #4]
   d55f4:	461a      	mov	r2, r3
   d55f6:	f7ff bb0b 	b.w	d4c10 <network_connect>

000d55fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d55fa:	6840      	ldr	r0, [r0, #4]
   d55fc:	2200      	movs	r2, #0
   d55fe:	2102      	movs	r1, #2
   d5600:	f7ff bb16 	b.w	d4c30 <network_disconnect>

000d5604 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5604:	2200      	movs	r2, #0
   d5606:	6840      	ldr	r0, [r0, #4]
   d5608:	4611      	mov	r1, r2
   d560a:	f7ff bb09 	b.w	d4c20 <network_connecting>

000d560e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d560e:	2200      	movs	r2, #0
   d5610:	6840      	ldr	r0, [r0, #4]
   d5612:	4611      	mov	r1, r2
   d5614:	f7ff bb14 	b.w	d4c40 <network_ready>

000d5618 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5618:	2300      	movs	r3, #0
   d561a:	6840      	ldr	r0, [r0, #4]
   d561c:	461a      	mov	r2, r3
   d561e:	4619      	mov	r1, r3
   d5620:	f7ff bb16 	b.w	d4c50 <network_on>

000d5624 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5624:	2300      	movs	r3, #0
   d5626:	6840      	ldr	r0, [r0, #4]
   d5628:	461a      	mov	r2, r3
   d562a:	4619      	mov	r1, r3
   d562c:	f7ff bb18 	b.w	d4c60 <network_off>

000d5630 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5630:	6840      	ldr	r0, [r0, #4]
   d5632:	2100      	movs	r1, #0
   d5634:	f7ff bb3c 	b.w	d4cb0 <network_is_on>

000d5638 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5638:	6840      	ldr	r0, [r0, #4]
   d563a:	2100      	movs	r1, #0
   d563c:	f7ff bb40 	b.w	d4cc0 <network_is_off>

000d5640 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5640:	6840      	ldr	r0, [r0, #4]
   d5642:	2200      	movs	r2, #0
   d5644:	f081 0101 	eor.w	r1, r1, #1
   d5648:	f7ff bb12 	b.w	d4c70 <network_listen>

000d564c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	2200      	movs	r2, #0
   d5650:	f7ff bb1e 	b.w	d4c90 <network_set_listen_timeout>

000d5654 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5654:	2200      	movs	r2, #0
   d5656:	6840      	ldr	r0, [r0, #4]
   d5658:	4611      	mov	r1, r2
   d565a:	f7ff bb21 	b.w	d4ca0 <network_get_listen_timeout>

000d565e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d565e:	2200      	movs	r2, #0
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	4611      	mov	r1, r2
   d5664:	f7ff bb0c 	b.w	d4c80 <network_listening>

000d5668 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d566c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d566e:	b095      	sub	sp, #84	; 0x54
   d5670:	4616      	mov	r6, r2
   d5672:	460d      	mov	r5, r1
   d5674:	4607      	mov	r7, r0
    IPAddress addr;
   d5676:	f7ff ff77 	bl	d5568 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d567a:	4621      	mov	r1, r4
   d567c:	2218      	movs	r2, #24
   d567e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5680:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5682:	f001 f83d 	bl	d6700 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5686:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5688:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d568c:	4621      	mov	r1, r4
   d568e:	466b      	mov	r3, sp
   d5690:	aa0c      	add	r2, sp, #48	; 0x30
   d5692:	4630      	mov	r0, r6
   d5694:	f7ff f9d8 	bl	d4a48 <netdb_getaddrinfo>
    if (!r) {
   d5698:	4604      	mov	r4, r0
   d569a:	2800      	cmp	r0, #0
   d569c:	d14c      	bne.n	d5738 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d569e:	4602      	mov	r2, r0
   d56a0:	2101      	movs	r1, #1
   d56a2:	6868      	ldr	r0, [r5, #4]
   d56a4:	f7ff facc 	bl	d4c40 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56ac:	4622      	mov	r2, r4
   d56ae:	6868      	ldr	r0, [r5, #4]
   d56b0:	f7ff fac6 	bl	d4c40 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56b6:	4681      	mov	r9, r0
        bool ok = false;
   d56b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56ba:	2e00      	cmp	r6, #0
   d56bc:	d03c      	beq.n	d5738 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d56be:	2900      	cmp	r1, #0
   d56c0:	d13a      	bne.n	d5738 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d56c2:	6873      	ldr	r3, [r6, #4]
   d56c4:	2b02      	cmp	r3, #2
   d56c6:	d003      	beq.n	d56d0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d56c8:	2b0a      	cmp	r3, #10
   d56ca:	d011      	beq.n	d56f0 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56cc:	69f6      	ldr	r6, [r6, #28]
   d56ce:	e7f4      	b.n	d56ba <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d56d0:	f1b8 0f00 	cmp.w	r8, #0
   d56d4:	d00a      	beq.n	d56ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d56d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d56d8:	a806      	add	r0, sp, #24
   d56da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d56dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d56de:	f7ff ff71 	bl	d55c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d56e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d56e4:	1d3c      	adds	r4, r7, #4
   d56e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d56e8:	682b      	ldr	r3, [r5, #0]
   d56ea:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d56ec:	4641      	mov	r1, r8
   d56ee:	e7ed      	b.n	d56cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d56f0:	f1b9 0f00 	cmp.w	r9, #0
   d56f4:	d101      	bne.n	d56fa <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d56f6:	4649      	mov	r1, r9
   d56f8:	e7e8      	b.n	d56cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d56fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d56fc:	2210      	movs	r2, #16
   d56fe:	a801      	add	r0, sp, #4
   d5700:	f000 fffe 	bl	d6700 <memset>
                    a.v = 6;
   d5704:	2306      	movs	r3, #6
   d5706:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d570a:	ad01      	add	r5, sp, #4
   d570c:	f104 0308 	add.w	r3, r4, #8
   d5710:	3418      	adds	r4, #24
   d5712:	6818      	ldr	r0, [r3, #0]
   d5714:	6859      	ldr	r1, [r3, #4]
   d5716:	462a      	mov	r2, r5
   d5718:	c203      	stmia	r2!, {r0, r1}
   d571a:	3308      	adds	r3, #8
   d571c:	42a3      	cmp	r3, r4
   d571e:	4615      	mov	r5, r2
   d5720:	d1f7      	bne.n	d5712 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5722:	a901      	add	r1, sp, #4
   d5724:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5726:	ad07      	add	r5, sp, #28
   d5728:	f7ff ff2c 	bl	d5584 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d572c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d572e:	1d3c      	adds	r4, r7, #4
   d5730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5732:	682b      	ldr	r3, [r5, #0]
   d5734:	7023      	strb	r3, [r4, #0]
   d5736:	e7de      	b.n	d56f6 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5738:	9800      	ldr	r0, [sp, #0]
   d573a:	f7ff f97d 	bl	d4a38 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d573e:	4638      	mov	r0, r7
   d5740:	b015      	add	sp, #84	; 0x54
   d5742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5748 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5748:	4b02      	ldr	r3, [pc, #8]	; (d5754 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d574a:	4a03      	ldr	r2, [pc, #12]	; (d5758 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d574c:	601a      	str	r2, [r3, #0]
   d574e:	2200      	movs	r2, #0
   d5750:	605a      	str	r2, [r3, #4]

} // spark
   d5752:	4770      	bx	lr
   d5754:	2003e65c 	.word	0x2003e65c
   d5758:	000d68d8 	.word	0x000d68d8

000d575c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d575e:	4606      	mov	r6, r0
   d5760:	460d      	mov	r5, r1
  size_t n = 0;
   d5762:	188f      	adds	r7, r1, r2
   d5764:	2400      	movs	r4, #0
  while (size--) {
   d5766:	42bd      	cmp	r5, r7
   d5768:	d00c      	beq.n	d5784 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d576a:	6833      	ldr	r3, [r6, #0]
   d576c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5770:	689b      	ldr	r3, [r3, #8]
   d5772:	4630      	mov	r0, r6
   d5774:	4798      	blx	r3
     if (chunk>=0)
   d5776:	1e03      	subs	r3, r0, #0
   d5778:	db01      	blt.n	d577e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d577a:	441c      	add	r4, r3
  while (size--) {
   d577c:	e7f3      	b.n	d5766 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d577e:	2c00      	cmp	r4, #0
   d5780:	bf08      	it	eq
   d5782:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5784:	4620      	mov	r0, r4
   d5786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5788 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5788:	b513      	push	{r0, r1, r4, lr}
   d578a:	4604      	mov	r4, r0
    }
   d578c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d578e:	b159      	cbz	r1, d57a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5790:	9101      	str	r1, [sp, #4]
   d5792:	f000 fffe 	bl	d6792 <strlen>
   d5796:	6823      	ldr	r3, [r4, #0]
   d5798:	9901      	ldr	r1, [sp, #4]
   d579a:	68db      	ldr	r3, [r3, #12]
   d579c:	4602      	mov	r2, r0
   d579e:	4620      	mov	r0, r4
    }
   d57a0:	b002      	add	sp, #8
   d57a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d57a6:	4718      	bx	r3
    }
   d57a8:	b002      	add	sp, #8
   d57aa:	bd10      	pop	{r4, pc}

000d57ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d57ac:	6803      	ldr	r3, [r0, #0]
   d57ae:	689b      	ldr	r3, [r3, #8]
   d57b0:	4718      	bx	r3

000d57b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d57b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d57b4:	210d      	movs	r1, #13
{
   d57b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d57b8:	f7ff fff8 	bl	d57ac <_ZN5Print5printEc>
  n += print('\n');
   d57bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d57be:	4604      	mov	r4, r0
  n += print('\n');
   d57c0:	4628      	mov	r0, r5
   d57c2:	f7ff fff3 	bl	d57ac <_ZN5Print5printEc>
  return n;
}
   d57c6:	4420      	add	r0, r4
   d57c8:	bd38      	pop	{r3, r4, r5, pc}

000d57ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d57ca:	b530      	push	{r4, r5, lr}
   d57cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d57ce:	2300      	movs	r3, #0
   d57d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57d4:	2a01      	cmp	r2, #1
   d57d6:	bf98      	it	ls
   d57d8:	220a      	movls	r2, #10
   d57da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d57dc:	460d      	mov	r5, r1
   d57de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d57e2:	fb01 5312 	mls	r3, r1, r2, r5
   d57e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57ea:	2b09      	cmp	r3, #9
   d57ec:	bf94      	ite	ls
   d57ee:	3330      	addls	r3, #48	; 0x30
   d57f0:	3337      	addhi	r3, #55	; 0x37
   d57f2:	b2db      	uxtb	r3, r3
  } while(n);
   d57f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d57fa:	d9ef      	bls.n	d57dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d57fc:	4621      	mov	r1, r4
   d57fe:	f7ff ffc3 	bl	d5788 <_ZN5Print5writeEPKc>
}
   d5802:	b00b      	add	sp, #44	; 0x2c
   d5804:	bd30      	pop	{r4, r5, pc}

000d5806 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d580a:	b086      	sub	sp, #24
   d580c:	af00      	add	r7, sp, #0
   d580e:	4605      	mov	r5, r0
   d5810:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5812:	1d38      	adds	r0, r7, #4
   d5814:	2114      	movs	r1, #20
{
   d5816:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5818:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d581a:	f7ff fa71 	bl	d4d00 <vsnprintf>

    if (n<bufsize)
   d581e:	2813      	cmp	r0, #19
   d5820:	d80e      	bhi.n	d5840 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5822:	1d39      	adds	r1, r7, #4
   d5824:	4628      	mov	r0, r5
   d5826:	f7ff ffaf 	bl	d5788 <_ZN5Print5writeEPKc>
   d582a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d582c:	b11e      	cbz	r6, d5836 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d582e:	4628      	mov	r0, r5
   d5830:	f7ff ffbf 	bl	d57b2 <_ZN5Print7printlnEv>
   d5834:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5836:	4620      	mov	r0, r4
   d5838:	3718      	adds	r7, #24
   d583a:	46bd      	mov	sp, r7
   d583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5840:	f100 0308 	add.w	r3, r0, #8
   d5844:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5848:	46e8      	mov	r8, sp
        char bigger[n+1];
   d584a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d584e:	4622      	mov	r2, r4
   d5850:	1c41      	adds	r1, r0, #1
   d5852:	683b      	ldr	r3, [r7, #0]
   d5854:	4668      	mov	r0, sp
   d5856:	f7ff fa53 	bl	d4d00 <vsnprintf>
  return write(str);
   d585a:	4669      	mov	r1, sp
   d585c:	4628      	mov	r0, r5
   d585e:	f7ff ff93 	bl	d5788 <_ZN5Print5writeEPKc>
   d5862:	4604      	mov	r4, r0
   d5864:	46c5      	mov	sp, r8
   d5866:	e7e1      	b.n	d582c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5868 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5868:	b510      	push	{r4, lr}
   d586a:	4604      	mov	r4, r0
   d586c:	f7ff fa97 	bl	d4d9e <_ZNSt14_Function_baseD1Ev>
   d5870:	4620      	mov	r0, r4
   d5872:	bd10      	pop	{r4, pc}

000d5874 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5874:	4803      	ldr	r0, [pc, #12]	; (d5884 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5876:	4a04      	ldr	r2, [pc, #16]	; (d5888 <_GLOBAL__sub_I_RGB+0x14>)
   d5878:	4904      	ldr	r1, [pc, #16]	; (d588c <_GLOBAL__sub_I_RGB+0x18>)
   d587a:	2300      	movs	r3, #0
   d587c:	6083      	str	r3, [r0, #8]
   d587e:	f000 baf9 	b.w	d5e74 <__aeabi_atexit>
   d5882:	bf00      	nop
   d5884:	2003e664 	.word	0x2003e664
   d5888:	2003e5d4 	.word	0x2003e5d4
   d588c:	000d5869 	.word	0x000d5869

000d5890 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5890:	b510      	push	{r4, lr}
   d5892:	4604      	mov	r4, r0
   d5894:	4608      	mov	r0, r1
{
    _spi = spi;
   d5896:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5898:	f7ff f8de 	bl	d4a58 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d589c:	2300      	movs	r3, #0
   d589e:	6063      	str	r3, [r4, #4]
}
   d58a0:	4620      	mov	r0, r4
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d58a4:	b510      	push	{r4, lr}
   d58a6:	4604      	mov	r4, r0
{
	free(buffer);
   d58a8:	6800      	ldr	r0, [r0, #0]
   d58aa:	f7ff fa19 	bl	d4ce0 <free>
}
   d58ae:	4620      	mov	r0, r4
   d58b0:	bd10      	pop	{r4, pc}

000d58b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d58b2:	b510      	push	{r4, lr}
   d58b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d58b6:	6800      	ldr	r0, [r0, #0]
   d58b8:	b108      	cbz	r0, d58be <_ZN6String10invalidateEv+0xc>
   d58ba:	f7ff fa11 	bl	d4ce0 <free>
	buffer = NULL;
   d58be:	2300      	movs	r3, #0
	capacity = len = 0;
   d58c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d58c4:	6023      	str	r3, [r4, #0]
}
   d58c6:	bd10      	pop	{r4, pc}

000d58c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d58c8:	b538      	push	{r3, r4, r5, lr}
   d58ca:	4604      	mov	r4, r0
   d58cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d58ce:	6800      	ldr	r0, [r0, #0]
   d58d0:	3101      	adds	r1, #1
   d58d2:	f7ff fa0d 	bl	d4cf0 <realloc>
	if (newbuffer) {
   d58d6:	b110      	cbz	r0, d58de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d58d8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d58dc:	2001      	movs	r0, #1
	}
	return 0;
}
   d58de:	bd38      	pop	{r3, r4, r5, pc}

000d58e0 <_ZN6String7reserveEj>:
{
   d58e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d58e2:	6803      	ldr	r3, [r0, #0]
{
   d58e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d58e6:	b123      	cbz	r3, d58f2 <_ZN6String7reserveEj+0x12>
   d58e8:	6843      	ldr	r3, [r0, #4]
   d58ea:	428b      	cmp	r3, r1
   d58ec:	d301      	bcc.n	d58f2 <_ZN6String7reserveEj+0x12>
   d58ee:	2001      	movs	r0, #1
}
   d58f0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d58f2:	4620      	mov	r0, r4
   d58f4:	f7ff ffe8 	bl	d58c8 <_ZN6String12changeBufferEj>
   d58f8:	2800      	cmp	r0, #0
   d58fa:	d0f9      	beq.n	d58f0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d58fc:	68a3      	ldr	r3, [r4, #8]
   d58fe:	2b00      	cmp	r3, #0
   d5900:	d1f5      	bne.n	d58ee <_ZN6String7reserveEj+0xe>
   d5902:	6822      	ldr	r2, [r4, #0]
   d5904:	7013      	strb	r3, [r2, #0]
   d5906:	e7f2      	b.n	d58ee <_ZN6String7reserveEj+0xe>

000d5908 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5908:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d590a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d590c:	4611      	mov	r1, r2
   d590e:	9201      	str	r2, [sp, #4]
{
   d5910:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5912:	f7ff ffe5 	bl	d58e0 <_ZN6String7reserveEj>
   d5916:	9a01      	ldr	r2, [sp, #4]
   d5918:	b928      	cbnz	r0, d5926 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d591a:	4620      	mov	r0, r4
   d591c:	f7ff ffc9 	bl	d58b2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5920:	4620      	mov	r0, r4
   d5922:	b003      	add	sp, #12
   d5924:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5926:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5928:	4629      	mov	r1, r5
   d592a:	6820      	ldr	r0, [r4, #0]
   d592c:	f000 feda 	bl	d66e4 <memcpy>
	buffer[len] = 0;
   d5930:	6822      	ldr	r2, [r4, #0]
   d5932:	68a3      	ldr	r3, [r4, #8]
   d5934:	2100      	movs	r1, #0
   d5936:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5938:	e7f2      	b.n	d5920 <_ZN6String4copyEPKcj+0x18>

000d593a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d593a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d593c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d593e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5942:	4604      	mov	r4, r0
	len = 0;
   d5944:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5946:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5948:	b141      	cbz	r1, d595c <_ZN6StringC1EPKc+0x22>
   d594a:	4608      	mov	r0, r1
   d594c:	9101      	str	r1, [sp, #4]
   d594e:	f000 ff20 	bl	d6792 <strlen>
   d5952:	9901      	ldr	r1, [sp, #4]
   d5954:	4602      	mov	r2, r0
   d5956:	4620      	mov	r0, r4
   d5958:	f7ff ffd6 	bl	d5908 <_ZN6String4copyEPKcj>
}
   d595c:	4620      	mov	r0, r4
   d595e:	b002      	add	sp, #8
   d5960:	bd10      	pop	{r4, pc}
	...

000d5964 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5964:	b40e      	push	{r1, r2, r3}
   d5966:	b570      	push	{r4, r5, r6, lr}
   d5968:	b087      	sub	sp, #28
   d596a:	ad0b      	add	r5, sp, #44	; 0x2c
   d596c:	4604      	mov	r4, r0
   d596e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5972:	9201      	str	r2, [sp, #4]
   d5974:	462b      	mov	r3, r5
   d5976:	2105      	movs	r1, #5
   d5978:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d597a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d597c:	f7ff f9c0 	bl	d4d00 <vsnprintf>
    va_end(marker);

    String result;
   d5980:	490b      	ldr	r1, [pc, #44]	; (d59b0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5982:	4606      	mov	r6, r0
    String result;
   d5984:	4620      	mov	r0, r4
   d5986:	f7ff ffd8 	bl	d593a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d598a:	4631      	mov	r1, r6
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff ffa7 	bl	d58e0 <_ZN6String7reserveEj>
    if (result.buffer) {
   d5992:	6820      	ldr	r0, [r4, #0]
   d5994:	b130      	cbz	r0, d59a4 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5996:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d5998:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d599a:	462b      	mov	r3, r5
   d599c:	1c71      	adds	r1, r6, #1
   d599e:	f7ff f9af 	bl	d4d00 <vsnprintf>
        va_end(marker);
        result.len = n;
   d59a2:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d59a4:	4620      	mov	r0, r4
   d59a6:	b007      	add	sp, #28
   d59a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d59ac:	b003      	add	sp, #12
   d59ae:	4770      	bx	lr
   d59b0:	000d6927 	.word	0x000d6927

000d59b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d59b4:	b510      	push	{r4, lr}
   d59b6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d59b8:	6800      	ldr	r0, [r0, #0]
   d59ba:	b118      	cbz	r0, d59c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d59bc:	f7ff f990 	bl	d4ce0 <free>
            wakeupSource_ = nullptr;
   d59c0:	2300      	movs	r3, #0
   d59c2:	6023      	str	r3, [r4, #0]
        }
    }
   d59c4:	bd10      	pop	{r4, pc}

000d59c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d59c6:	b510      	push	{r4, lr}
   d59c8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d59ca:	f7ff fff3 	bl	d59b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d59ce:	4620      	mov	r0, r4
   d59d0:	bd10      	pop	{r4, pc}
	...

000d59d4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d59d4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d59d6:	4b09      	ldr	r3, [pc, #36]	; (d59fc <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d59d8:	4c09      	ldr	r4, [pc, #36]	; (d5a00 <_GLOBAL__sub_I_System+0x2c>)
   d59da:	2202      	movs	r2, #2
   d59dc:	2000      	movs	r0, #0
   d59de:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d59e0:	4b08      	ldr	r3, [pc, #32]	; (d5a04 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d59e2:	6020      	str	r0, [r4, #0]
   d59e4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d59e6:	71a0      	strb	r0, [r4, #6]
   d59e8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d59ea:	f7ff f8c5 	bl	d4b78 <set_system_mode>
SystemClass System;
   d59ee:	4620      	mov	r0, r4
   d59f0:	4a05      	ldr	r2, [pc, #20]	; (d5a08 <_GLOBAL__sub_I_System+0x34>)
   d59f2:	4906      	ldr	r1, [pc, #24]	; (d5a0c <_GLOBAL__sub_I_System+0x38>)
   d59f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d59f8:	f000 ba3c 	b.w	d5e74 <__aeabi_atexit>
   d59fc:	2003e680 	.word	0x2003e680
   d5a00:	2003e674 	.word	0x2003e674
   d5a04:	ffff0000 	.word	0xffff0000
   d5a08:	2003e5d4 	.word	0x2003e5d4
   d5a0c:	000d59c7 	.word	0x000d59c7

000d5a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a10:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a12:	681a      	ldr	r2, [r3, #0]
   d5a14:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5a18:	4770      	bx	lr
   d5a1a:	bf00      	nop
   d5a1c:	2003e56c 	.word	0x2003e56c
   d5a20:	2003e684 	.word	0x2003e684

000d5a24 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5a24:	4770      	bx	lr

000d5a26 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a26:	7441      	strb	r1, [r0, #17]
}
   d5a28:	4770      	bx	lr

000d5a2a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5a2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5a2c:	7c00      	ldrb	r0, [r0, #16]
   d5a2e:	f7ff f85b 	bl	d4ae8 <hal_usart_available_data_for_write>
}
   d5a32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a36:	bd08      	pop	{r3, pc}

000d5a38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a38:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5a3a:	7c00      	ldrb	r0, [r0, #16]
   d5a3c:	f7ff f82c 	bl	d4a98 <hal_usart_available>
}
   d5a40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a44:	bd08      	pop	{r3, pc}

000d5a46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5a48:	7c00      	ldrb	r0, [r0, #16]
   d5a4a:	f7ff f835 	bl	d4ab8 <hal_usart_peek>
}
   d5a4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a52:	bd08      	pop	{r3, pc}

000d5a54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a54:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5a56:	7c00      	ldrb	r0, [r0, #16]
   d5a58:	f7ff f826 	bl	d4aa8 <hal_usart_read>
}
   d5a5c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5a60:	bd08      	pop	{r3, pc}

000d5a62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5a62:	7c00      	ldrb	r0, [r0, #16]
   d5a64:	f7ff b830 	b.w	d4ac8 <hal_usart_flush>

000d5a68 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a6a:	7c45      	ldrb	r5, [r0, #17]
{
   d5a6c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a6e:	b12d      	cbz	r5, d5a7c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5a70:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a72:	b003      	add	sp, #12
   d5a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5a78:	f7ff b806 	b.w	d4a88 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5a7c:	7c00      	ldrb	r0, [r0, #16]
   d5a7e:	9101      	str	r1, [sp, #4]
   d5a80:	f7ff f832 	bl	d4ae8 <hal_usart_available_data_for_write>
   d5a84:	2800      	cmp	r0, #0
   d5a86:	9901      	ldr	r1, [sp, #4]
   d5a88:	dcf2      	bgt.n	d5a70 <_ZN11USARTSerial5writeEh+0x8>
}
   d5a8a:	4628      	mov	r0, r5
   d5a8c:	b003      	add	sp, #12
   d5a8e:	bd30      	pop	{r4, r5, pc}

000d5a90 <_ZN11USARTSerialD0Ev>:
   d5a90:	b510      	push	{r4, lr}
   d5a92:	2114      	movs	r1, #20
   d5a94:	4604      	mov	r4, r0
   d5a96:	f000 f9f2 	bl	d5e7e <_ZdlPvj>
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	bd10      	pop	{r4, pc}
	...

000d5aa0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	f04f 0c00 	mov.w	ip, #0
   d5aa6:	4604      	mov	r4, r0
   d5aa8:	4608      	mov	r0, r1
   d5aaa:	4611      	mov	r1, r2
   d5aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ab0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5ab4:	4a04      	ldr	r2, [pc, #16]	; (d5ac8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5ab6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5ab8:	2201      	movs	r2, #1
  _serial = serial;
   d5aba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5abc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5abe:	461a      	mov	r2, r3
   d5ac0:	f7fe ffda 	bl	d4a78 <hal_usart_init>
}
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	bd10      	pop	{r4, pc}
   d5ac8:	000d6930 	.word	0x000d6930

000d5acc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5acc:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5ace:	4c0e      	ldr	r4, [pc, #56]	; (d5b08 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ad0:	7821      	ldrb	r1, [r4, #0]
   d5ad2:	f3bf 8f5b 	dmb	ish
   d5ad6:	f011 0101 	ands.w	r1, r1, #1
   d5ada:	d112      	bne.n	d5b02 <_Z22__fetch_global_Serial1v+0x36>
   d5adc:	4620      	mov	r0, r4
   d5ade:	9101      	str	r1, [sp, #4]
   d5ae0:	f7fe fadf 	bl	d40a2 <__cxa_guard_acquire>
   d5ae4:	9901      	ldr	r1, [sp, #4]
   d5ae6:	b160      	cbz	r0, d5b02 <_Z22__fetch_global_Serial1v+0x36>
   d5ae8:	4a08      	ldr	r2, [pc, #32]	; (d5b0c <_Z22__fetch_global_Serial1v+0x40>)
   d5aea:	4b09      	ldr	r3, [pc, #36]	; (d5b10 <_Z22__fetch_global_Serial1v+0x44>)
   d5aec:	4809      	ldr	r0, [pc, #36]	; (d5b14 <_Z22__fetch_global_Serial1v+0x48>)
   d5aee:	f7ff ffd7 	bl	d5aa0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5af2:	4620      	mov	r0, r4
   d5af4:	f7fe fada 	bl	d40ac <__cxa_guard_release>
   d5af8:	4a07      	ldr	r2, [pc, #28]	; (d5b18 <_Z22__fetch_global_Serial1v+0x4c>)
   d5afa:	4908      	ldr	r1, [pc, #32]	; (d5b1c <_Z22__fetch_global_Serial1v+0x50>)
   d5afc:	4805      	ldr	r0, [pc, #20]	; (d5b14 <_Z22__fetch_global_Serial1v+0x48>)
   d5afe:	f000 f9b9 	bl	d5e74 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b02:	4804      	ldr	r0, [pc, #16]	; (d5b14 <_Z22__fetch_global_Serial1v+0x48>)
   d5b04:	b002      	add	sp, #8
   d5b06:	bd10      	pop	{r4, pc}
   d5b08:	2003e688 	.word	0x2003e688
   d5b0c:	2003e68c 	.word	0x2003e68c
   d5b10:	2003e710 	.word	0x2003e710
   d5b14:	2003e794 	.word	0x2003e794
   d5b18:	2003e5d4 	.word	0x2003e5d4
   d5b1c:	000d5a25 	.word	0x000d5a25

000d5b20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b20:	7441      	strb	r1, [r0, #17]
}
   d5b22:	4770      	bx	lr

000d5b24 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b24:	4770      	bx	lr

000d5b26 <_ZN9USBSerial4readEv>:
{
   d5b26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5b28:	2100      	movs	r1, #0
   d5b2a:	7c00      	ldrb	r0, [r0, #16]
   d5b2c:	f7ff f804 	bl	d4b38 <HAL_USB_USART_Receive_Data>
}
   d5b30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b34:	bd08      	pop	{r3, pc}

000d5b36 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5b36:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5b38:	2101      	movs	r1, #1
   d5b3a:	7c00      	ldrb	r0, [r0, #16]
   d5b3c:	f7fe fffc 	bl	d4b38 <HAL_USB_USART_Receive_Data>
}
   d5b40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5b44:	bd08      	pop	{r3, pc}

000d5b46 <_ZN9USBSerial17availableForWriteEv>:
{
   d5b46:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5b48:	7c00      	ldrb	r0, [r0, #16]
   d5b4a:	f7fe ffed 	bl	d4b28 <HAL_USB_USART_Available_Data_For_Write>
}
   d5b4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b52:	bd08      	pop	{r3, pc}

000d5b54 <_ZN9USBSerial9availableEv>:
{
   d5b54:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5b56:	7c00      	ldrb	r0, [r0, #16]
   d5b58:	f7fe ffde 	bl	d4b18 <HAL_USB_USART_Available_Data>
}
   d5b5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b60:	bd08      	pop	{r3, pc}

000d5b62 <_ZN9USBSerial5writeEh>:
{
   d5b62:	b513      	push	{r0, r1, r4, lr}
   d5b64:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b66:	7c00      	ldrb	r0, [r0, #16]
{
   d5b68:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5b6a:	f7fe ffdd 	bl	d4b28 <HAL_USB_USART_Available_Data_For_Write>
   d5b6e:	2800      	cmp	r0, #0
   d5b70:	9901      	ldr	r1, [sp, #4]
   d5b72:	dc01      	bgt.n	d5b78 <_ZN9USBSerial5writeEh+0x16>
   d5b74:	7c60      	ldrb	r0, [r4, #17]
   d5b76:	b120      	cbz	r0, d5b82 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5b78:	7c20      	ldrb	r0, [r4, #16]
   d5b7a:	f7fe ffe5 	bl	d4b48 <HAL_USB_USART_Send_Data>
   d5b7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5b82:	b002      	add	sp, #8
   d5b84:	bd10      	pop	{r4, pc}

000d5b86 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5b86:	7c00      	ldrb	r0, [r0, #16]
   d5b88:	f7fe bfe6 	b.w	d4b58 <HAL_USB_USART_Flush_Data>

000d5b8c <_ZN9USBSerialD0Ev>:
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	2114      	movs	r1, #20
   d5b90:	4604      	mov	r4, r0
   d5b92:	f000 f974 	bl	d5e7e <_ZdlPvj>
   d5b96:	4620      	mov	r0, r4
   d5b98:	bd10      	pop	{r4, pc}
	...

000d5b9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	4608      	mov	r0, r1
   d5ba6:	2100      	movs	r1, #0
   d5ba8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5bac:	4b04      	ldr	r3, [pc, #16]	; (d5bc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5bae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5bb0:	2301      	movs	r3, #1
  _serial = serial;
   d5bb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5bb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5bb6:	4611      	mov	r1, r2
   d5bb8:	f7fe ff9e 	bl	d4af8 <HAL_USB_USART_Init>
}
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	bd10      	pop	{r4, pc}
   d5bc0:	000d6960 	.word	0x000d6960

000d5bc4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5bc4:	7c00      	ldrb	r0, [r0, #16]
   d5bc6:	2200      	movs	r2, #0
   d5bc8:	f7fe bf9e 	b.w	d4b08 <HAL_USB_USART_Begin>

000d5bcc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5bcc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5bce:	2214      	movs	r2, #20
{
   d5bd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5bd2:	2100      	movs	r1, #0
   d5bd4:	f000 fd94 	bl	d6700 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5bd8:	4620      	mov	r0, r4
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5bdc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5bde:	4c10      	ldr	r4, [pc, #64]	; (d5c20 <_Z16_fetch_usbserialv+0x44>)
{
   d5be0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5be2:	a803      	add	r0, sp, #12
   d5be4:	f7ff fff2 	bl	d5bcc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5be8:	7821      	ldrb	r1, [r4, #0]
   d5bea:	f3bf 8f5b 	dmb	ish
   d5bee:	f011 0101 	ands.w	r1, r1, #1
   d5bf2:	d111      	bne.n	d5c18 <_Z16_fetch_usbserialv+0x3c>
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	9101      	str	r1, [sp, #4]
   d5bf8:	f7fe fa53 	bl	d40a2 <__cxa_guard_acquire>
   d5bfc:	9901      	ldr	r1, [sp, #4]
   d5bfe:	b158      	cbz	r0, d5c18 <_Z16_fetch_usbserialv+0x3c>
   d5c00:	aa03      	add	r2, sp, #12
   d5c02:	4808      	ldr	r0, [pc, #32]	; (d5c24 <_Z16_fetch_usbserialv+0x48>)
   d5c04:	f7ff ffca 	bl	d5b9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c08:	4620      	mov	r0, r4
   d5c0a:	f7fe fa4f 	bl	d40ac <__cxa_guard_release>
   d5c0e:	4a06      	ldr	r2, [pc, #24]	; (d5c28 <_Z16_fetch_usbserialv+0x4c>)
   d5c10:	4906      	ldr	r1, [pc, #24]	; (d5c2c <_Z16_fetch_usbserialv+0x50>)
   d5c12:	4804      	ldr	r0, [pc, #16]	; (d5c24 <_Z16_fetch_usbserialv+0x48>)
   d5c14:	f000 f92e 	bl	d5e74 <__aeabi_atexit>
	return _usbserial;
}
   d5c18:	4802      	ldr	r0, [pc, #8]	; (d5c24 <_Z16_fetch_usbserialv+0x48>)
   d5c1a:	b008      	add	sp, #32
   d5c1c:	bd10      	pop	{r4, pc}
   d5c1e:	bf00      	nop
   d5c20:	2003e7a8 	.word	0x2003e7a8
   d5c24:	2003e7ac 	.word	0x2003e7ac
   d5c28:	2003e5d4 	.word	0x2003e5d4
   d5c2c:	000d5b25 	.word	0x000d5b25

000d5c30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5c30:	4b01      	ldr	r3, [pc, #4]	; (d5c38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5c32:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5c34:	4770      	bx	lr
   d5c36:	bf00      	nop
   d5c38:	2003e570 	.word	0x2003e570

000d5c3c <serialEventRun>:
{
   d5c3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c3e:	4b0b      	ldr	r3, [pc, #44]	; (d5c6c <serialEventRun+0x30>)
   d5c40:	b143      	cbz	r3, d5c54 <serialEventRun+0x18>
   d5c42:	f7ff ffcb 	bl	d5bdc <_Z16_fetch_usbserialv>
   d5c46:	6803      	ldr	r3, [r0, #0]
   d5c48:	691b      	ldr	r3, [r3, #16]
   d5c4a:	4798      	blx	r3
   d5c4c:	2800      	cmp	r0, #0
   d5c4e:	dd01      	ble.n	d5c54 <serialEventRun+0x18>
        serialEvent();
   d5c50:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5c54:	4b06      	ldr	r3, [pc, #24]	; (d5c70 <serialEventRun+0x34>)
   d5c56:	b143      	cbz	r3, d5c6a <serialEventRun+0x2e>
   d5c58:	f7ff ff38 	bl	d5acc <_Z22__fetch_global_Serial1v>
   d5c5c:	6803      	ldr	r3, [r0, #0]
   d5c5e:	691b      	ldr	r3, [r3, #16]
   d5c60:	4798      	blx	r3
   d5c62:	2800      	cmp	r0, #0
   d5c64:	dd01      	ble.n	d5c6a <serialEventRun+0x2e>
        serialEvent1();
   d5c66:	f3af 8000 	nop.w
}
   d5c6a:	bd08      	pop	{r3, pc}
	...

000d5c74 <_post_loop>:
{
   d5c74:	b508      	push	{r3, lr}
	serialEventRun();
   d5c76:	f7ff ffe1 	bl	d5c3c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c7a:	f7fe fe65 	bl	d4948 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c7e:	4b01      	ldr	r3, [pc, #4]	; (d5c84 <_post_loop+0x10>)
   d5c80:	6018      	str	r0, [r3, #0]
}
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	2003e7d4 	.word	0x2003e7d4

000d5c88 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5c88:	4802      	ldr	r0, [pc, #8]	; (d5c94 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5c8a:	4a03      	ldr	r2, [pc, #12]	; (d5c98 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5c8c:	4903      	ldr	r1, [pc, #12]	; (d5c9c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5c8e:	1a12      	subs	r2, r2, r0
   d5c90:	f000 bd28 	b.w	d66e4 <memcpy>
   d5c94:	2003f400 	.word	0x2003f400
   d5c98:	2003f404 	.word	0x2003f404
   d5c9c:	000d69b0 	.word	0x000d69b0

000d5ca0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ca0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ca2:	2300      	movs	r3, #0
   d5ca4:	9300      	str	r3, [sp, #0]
   d5ca6:	461a      	mov	r2, r3
   d5ca8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cac:	f7fe ff8e 	bl	d4bcc <system_ctrl_set_result>
}
   d5cb0:	b003      	add	sp, #12
   d5cb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5cb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5cb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5cba:	8843      	ldrh	r3, [r0, #2]
   d5cbc:	2b0a      	cmp	r3, #10
   d5cbe:	d008      	beq.n	d5cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5cc0:	2b50      	cmp	r3, #80	; 0x50
   d5cc2:	d10b      	bne.n	d5cdc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5cc4:	4b09      	ldr	r3, [pc, #36]	; (d5cec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5cc6:	681b      	ldr	r3, [r3, #0]
   d5cc8:	b14b      	cbz	r3, d5cde <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5cca:	b003      	add	sp, #12
   d5ccc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5cd0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5cd2:	f7ff ffe5 	bl	d5ca0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5cd6:	b003      	add	sp, #12
   d5cd8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cdc:	2300      	movs	r3, #0
   d5cde:	9300      	str	r3, [sp, #0]
   d5ce0:	461a      	mov	r2, r3
   d5ce2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ce6:	f7fe ff71 	bl	d4bcc <system_ctrl_set_result>
}
   d5cea:	e7f4      	b.n	d5cd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5cec:	2003e7c4 	.word	0x2003e7c4

000d5cf0 <module_user_init_hook>:
{
   d5cf0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cf2:	4c12      	ldr	r4, [pc, #72]	; (d5d3c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5cf4:	4812      	ldr	r0, [pc, #72]	; (d5d40 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cf6:	4d13      	ldr	r5, [pc, #76]	; (d5d44 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	f7ff f819 	bl	d4d30 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5cfe:	6823      	ldr	r3, [r4, #0]
   d5d00:	42ab      	cmp	r3, r5
   d5d02:	4b11      	ldr	r3, [pc, #68]	; (d5d48 <module_user_init_hook+0x58>)
   d5d04:	bf0c      	ite	eq
   d5d06:	2201      	moveq	r2, #1
   d5d08:	2200      	movne	r2, #0
   d5d0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5d0c:	d002      	beq.n	d5d14 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5d0e:	f7ff ffbb 	bl	d5c88 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5d12:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d14:	f7fe fe08 	bl	d4928 <HAL_RNG_GetRandomNumber>
   d5d18:	4604      	mov	r4, r0
    srand(seed);
   d5d1a:	f000 fcf9 	bl	d6710 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d1e:	4b0b      	ldr	r3, [pc, #44]	; (d5d4c <module_user_init_hook+0x5c>)
   d5d20:	b113      	cbz	r3, d5d28 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5d22:	4620      	mov	r0, r4
   d5d24:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d28:	2100      	movs	r1, #0
   d5d2a:	4808      	ldr	r0, [pc, #32]	; (d5d4c <module_user_init_hook+0x5c>)
   d5d2c:	f7fe ff68 	bl	d4c00 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d34:	4806      	ldr	r0, [pc, #24]	; (d5d50 <module_user_init_hook+0x60>)
   d5d36:	2100      	movs	r1, #0
   d5d38:	f7fe bf3e 	b.w	d4bb8 <system_ctrl_set_app_request_handler>
   d5d3c:	2003f400 	.word	0x2003f400
   d5d40:	000d5c31 	.word	0x000d5c31
   d5d44:	9a271c1e 	.word	0x9a271c1e
   d5d48:	2003e7c0 	.word	0x2003e7c0
   d5d4c:	00000000 	.word	0x00000000
   d5d50:	000d5cb9 	.word	0x000d5cb9

000d5d54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5d54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5d56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5d58:	d902      	bls.n	d5d60 <pinAvailable+0xc>
    return false;
   d5d5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5d5c:	b002      	add	sp, #8
   d5d5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5d60:	f1a0 030b 	sub.w	r3, r0, #11
   d5d64:	2b02      	cmp	r3, #2
   d5d66:	d81a      	bhi.n	d5d9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5d68:	4c17      	ldr	r4, [pc, #92]	; (d5dc8 <pinAvailable+0x74>)
   d5d6a:	7821      	ldrb	r1, [r4, #0]
   d5d6c:	f3bf 8f5b 	dmb	ish
   d5d70:	f011 0101 	ands.w	r1, r1, #1
   d5d74:	d10b      	bne.n	d5d8e <pinAvailable+0x3a>
   d5d76:	4620      	mov	r0, r4
   d5d78:	9101      	str	r1, [sp, #4]
   d5d7a:	f7fe f992 	bl	d40a2 <__cxa_guard_acquire>
   d5d7e:	9901      	ldr	r1, [sp, #4]
   d5d80:	b128      	cbz	r0, d5d8e <pinAvailable+0x3a>
   d5d82:	4812      	ldr	r0, [pc, #72]	; (d5dcc <pinAvailable+0x78>)
   d5d84:	f7ff fd84 	bl	d5890 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f7fe f98f 	bl	d40ac <__cxa_guard_release>
   d5d8e:	4b0f      	ldr	r3, [pc, #60]	; (d5dcc <pinAvailable+0x78>)
   d5d90:	7818      	ldrb	r0, [r3, #0]
   d5d92:	f7fe fe69 	bl	d4a68 <hal_spi_is_enabled>
   d5d96:	2800      	cmp	r0, #0
   d5d98:	d1df      	bne.n	d5d5a <pinAvailable+0x6>
  return true; // 'pin' is available
   d5d9a:	2001      	movs	r0, #1
   d5d9c:	e7de      	b.n	d5d5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5d9e:	2801      	cmp	r0, #1
   d5da0:	d809      	bhi.n	d5db6 <pinAvailable+0x62>
   d5da2:	f000 f83f 	bl	d5e24 <_Z19__fetch_global_Wirev>
   d5da6:	2100      	movs	r1, #0
   d5da8:	7c00      	ldrb	r0, [r0, #16]
   d5daa:	f7fe fe2d 	bl	d4a08 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5dae:	f080 0001 	eor.w	r0, r0, #1
   d5db2:	b2c0      	uxtb	r0, r0
   d5db4:	e7d2      	b.n	d5d5c <pinAvailable+0x8>
   d5db6:	3809      	subs	r0, #9
   d5db8:	2801      	cmp	r0, #1
   d5dba:	d8ee      	bhi.n	d5d9a <pinAvailable+0x46>
   d5dbc:	f7ff fe86 	bl	d5acc <_Z22__fetch_global_Serial1v>
   d5dc0:	7c00      	ldrb	r0, [r0, #16]
   d5dc2:	f7fe fe89 	bl	d4ad8 <hal_usart_is_enabled>
   d5dc6:	e7f2      	b.n	d5dae <pinAvailable+0x5a>
   d5dc8:	2003e7c8 	.word	0x2003e7c8
   d5dcc:	2003e7cc 	.word	0x2003e7cc

000d5dd0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dd0:	2823      	cmp	r0, #35	; 0x23
{
   d5dd2:	b538      	push	{r3, r4, r5, lr}
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5dd8:	d80a      	bhi.n	d5df0 <pinMode+0x20>
   d5dda:	29ff      	cmp	r1, #255	; 0xff
   d5ddc:	d008      	beq.n	d5df0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5dde:	f7ff ffb9 	bl	d5d54 <pinAvailable>
   d5de2:	b128      	cbz	r0, d5df0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5de4:	4629      	mov	r1, r5
   d5de6:	4620      	mov	r0, r4
}
   d5de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5dec:	f7fe bdcc 	b.w	d4988 <HAL_Pin_Mode>
}
   d5df0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5df4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5df4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5df6:	2300      	movs	r3, #0
   d5df8:	2520      	movs	r5, #32
   d5dfa:	8043      	strh	r3, [r0, #2]
   d5dfc:	2314      	movs	r3, #20
{
   d5dfe:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5e00:	8003      	strh	r3, [r0, #0]
   d5e02:	6085      	str	r5, [r0, #8]
   d5e04:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5e06:	4906      	ldr	r1, [pc, #24]	; (d5e20 <_Z17acquireWireBufferv+0x2c>)
   d5e08:	4628      	mov	r0, r5
   d5e0a:	f000 f83a 	bl	d5e82 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5e0e:	4904      	ldr	r1, [pc, #16]	; (d5e20 <_Z17acquireWireBufferv+0x2c>)
	};
   d5e10:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5e12:	4628      	mov	r0, r5
   d5e14:	f000 f835 	bl	d5e82 <_ZnajRKSt9nothrow_t>
	};
   d5e18:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	bd38      	pop	{r3, r4, r5, pc}
   d5e1e:	bf00      	nop
   d5e20:	000d6988 	.word	0x000d6988

000d5e24 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5e24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5e26:	4d0f      	ldr	r5, [pc, #60]	; (d5e64 <_Z19__fetch_global_Wirev+0x40>)
   d5e28:	7829      	ldrb	r1, [r5, #0]
   d5e2a:	f3bf 8f5b 	dmb	ish
   d5e2e:	f011 0401 	ands.w	r4, r1, #1
{
   d5e32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5e34:	d113      	bne.n	d5e5e <_Z19__fetch_global_Wirev+0x3a>
   d5e36:	4628      	mov	r0, r5
   d5e38:	f7fe f933 	bl	d40a2 <__cxa_guard_acquire>
   d5e3c:	b178      	cbz	r0, d5e5e <_Z19__fetch_global_Wirev+0x3a>
   d5e3e:	a801      	add	r0, sp, #4
   d5e40:	f7ff ffd8 	bl	d5df4 <_Z17acquireWireBufferv>
   d5e44:	aa01      	add	r2, sp, #4
   d5e46:	4621      	mov	r1, r4
   d5e48:	4807      	ldr	r0, [pc, #28]	; (d5e68 <_Z19__fetch_global_Wirev+0x44>)
   d5e4a:	f7ff fb3d 	bl	d54c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5e4e:	4628      	mov	r0, r5
   d5e50:	f7fe f92c 	bl	d40ac <__cxa_guard_release>
   d5e54:	4a05      	ldr	r2, [pc, #20]	; (d5e6c <_Z19__fetch_global_Wirev+0x48>)
   d5e56:	4906      	ldr	r1, [pc, #24]	; (d5e70 <_Z19__fetch_global_Wirev+0x4c>)
   d5e58:	4803      	ldr	r0, [pc, #12]	; (d5e68 <_Z19__fetch_global_Wirev+0x44>)
   d5e5a:	f000 f80b 	bl	d5e74 <__aeabi_atexit>
	return wire;
}
   d5e5e:	4802      	ldr	r0, [pc, #8]	; (d5e68 <_Z19__fetch_global_Wirev+0x44>)
   d5e60:	b007      	add	sp, #28
   d5e62:	bd30      	pop	{r4, r5, pc}
   d5e64:	2003e7d8 	.word	0x2003e7d8
   d5e68:	2003e7dc 	.word	0x2003e7dc
   d5e6c:	2003e5d4 	.word	0x2003e5d4
   d5e70:	000d5471 	.word	0x000d5471

000d5e74 <__aeabi_atexit>:
   d5e74:	460b      	mov	r3, r1
   d5e76:	4601      	mov	r1, r0
   d5e78:	4618      	mov	r0, r3
   d5e7a:	f000 bc25 	b.w	d66c8 <__cxa_atexit>

000d5e7e <_ZdlPvj>:
   d5e7e:	f7fe b90e 	b.w	d409e <_ZdlPv>

000d5e82 <_ZnajRKSt9nothrow_t>:
   d5e82:	f7fe b90a 	b.w	d409a <_Znaj>

000d5e86 <_ZSt25__throw_bad_function_callv>:
   d5e86:	b508      	push	{r3, lr}
   d5e88:	f7fe ff42 	bl	d4d10 <abort>

000d5e8c <__aeabi_drsub>:
   d5e8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5e90:	e002      	b.n	d5e98 <__adddf3>
   d5e92:	bf00      	nop

000d5e94 <__aeabi_dsub>:
   d5e94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5e98 <__adddf3>:
   d5e98:	b530      	push	{r4, r5, lr}
   d5e9a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5e9e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ea2:	ea94 0f05 	teq	r4, r5
   d5ea6:	bf08      	it	eq
   d5ea8:	ea90 0f02 	teqeq	r0, r2
   d5eac:	bf1f      	itttt	ne
   d5eae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5eb2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5eb6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5eba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ebe:	f000 80e2 	beq.w	d6086 <__adddf3+0x1ee>
   d5ec2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5ec6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5eca:	bfb8      	it	lt
   d5ecc:	426d      	neglt	r5, r5
   d5ece:	dd0c      	ble.n	d5eea <__adddf3+0x52>
   d5ed0:	442c      	add	r4, r5
   d5ed2:	ea80 0202 	eor.w	r2, r0, r2
   d5ed6:	ea81 0303 	eor.w	r3, r1, r3
   d5eda:	ea82 0000 	eor.w	r0, r2, r0
   d5ede:	ea83 0101 	eor.w	r1, r3, r1
   d5ee2:	ea80 0202 	eor.w	r2, r0, r2
   d5ee6:	ea81 0303 	eor.w	r3, r1, r3
   d5eea:	2d36      	cmp	r5, #54	; 0x36
   d5eec:	bf88      	it	hi
   d5eee:	bd30      	pophi	{r4, r5, pc}
   d5ef0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5ef4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ef8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5efc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5f00:	d002      	beq.n	d5f08 <__adddf3+0x70>
   d5f02:	4240      	negs	r0, r0
   d5f04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f08:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5f0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f10:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5f14:	d002      	beq.n	d5f1c <__adddf3+0x84>
   d5f16:	4252      	negs	r2, r2
   d5f18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5f1c:	ea94 0f05 	teq	r4, r5
   d5f20:	f000 80a7 	beq.w	d6072 <__adddf3+0x1da>
   d5f24:	f1a4 0401 	sub.w	r4, r4, #1
   d5f28:	f1d5 0e20 	rsbs	lr, r5, #32
   d5f2c:	db0d      	blt.n	d5f4a <__adddf3+0xb2>
   d5f2e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5f32:	fa22 f205 	lsr.w	r2, r2, r5
   d5f36:	1880      	adds	r0, r0, r2
   d5f38:	f141 0100 	adc.w	r1, r1, #0
   d5f3c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5f40:	1880      	adds	r0, r0, r2
   d5f42:	fa43 f305 	asr.w	r3, r3, r5
   d5f46:	4159      	adcs	r1, r3
   d5f48:	e00e      	b.n	d5f68 <__adddf3+0xd0>
   d5f4a:	f1a5 0520 	sub.w	r5, r5, #32
   d5f4e:	f10e 0e20 	add.w	lr, lr, #32
   d5f52:	2a01      	cmp	r2, #1
   d5f54:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5f58:	bf28      	it	cs
   d5f5a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5f5e:	fa43 f305 	asr.w	r3, r3, r5
   d5f62:	18c0      	adds	r0, r0, r3
   d5f64:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f6c:	d507      	bpl.n	d5f7e <__adddf3+0xe6>
   d5f6e:	f04f 0e00 	mov.w	lr, #0
   d5f72:	f1dc 0c00 	rsbs	ip, ip, #0
   d5f76:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5f7a:	eb6e 0101 	sbc.w	r1, lr, r1
   d5f7e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5f82:	d31b      	bcc.n	d5fbc <__adddf3+0x124>
   d5f84:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5f88:	d30c      	bcc.n	d5fa4 <__adddf3+0x10c>
   d5f8a:	0849      	lsrs	r1, r1, #1
   d5f8c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5f90:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5f94:	f104 0401 	add.w	r4, r4, #1
   d5f98:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5f9c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5fa0:	f080 809a 	bcs.w	d60d8 <__adddf3+0x240>
   d5fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5fa8:	bf08      	it	eq
   d5faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5fae:	f150 0000 	adcs.w	r0, r0, #0
   d5fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fb6:	ea41 0105 	orr.w	r1, r1, r5
   d5fba:	bd30      	pop	{r4, r5, pc}
   d5fbc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5fc0:	4140      	adcs	r0, r0
   d5fc2:	eb41 0101 	adc.w	r1, r1, r1
   d5fc6:	3c01      	subs	r4, #1
   d5fc8:	bf28      	it	cs
   d5fca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5fce:	d2e9      	bcs.n	d5fa4 <__adddf3+0x10c>
   d5fd0:	f091 0f00 	teq	r1, #0
   d5fd4:	bf04      	itt	eq
   d5fd6:	4601      	moveq	r1, r0
   d5fd8:	2000      	moveq	r0, #0
   d5fda:	fab1 f381 	clz	r3, r1
   d5fde:	bf08      	it	eq
   d5fe0:	3320      	addeq	r3, #32
   d5fe2:	f1a3 030b 	sub.w	r3, r3, #11
   d5fe6:	f1b3 0220 	subs.w	r2, r3, #32
   d5fea:	da0c      	bge.n	d6006 <__adddf3+0x16e>
   d5fec:	320c      	adds	r2, #12
   d5fee:	dd08      	ble.n	d6002 <__adddf3+0x16a>
   d5ff0:	f102 0c14 	add.w	ip, r2, #20
   d5ff4:	f1c2 020c 	rsb	r2, r2, #12
   d5ff8:	fa01 f00c 	lsl.w	r0, r1, ip
   d5ffc:	fa21 f102 	lsr.w	r1, r1, r2
   d6000:	e00c      	b.n	d601c <__adddf3+0x184>
   d6002:	f102 0214 	add.w	r2, r2, #20
   d6006:	bfd8      	it	le
   d6008:	f1c2 0c20 	rsble	ip, r2, #32
   d600c:	fa01 f102 	lsl.w	r1, r1, r2
   d6010:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6014:	bfdc      	itt	le
   d6016:	ea41 010c 	orrle.w	r1, r1, ip
   d601a:	4090      	lslle	r0, r2
   d601c:	1ae4      	subs	r4, r4, r3
   d601e:	bfa2      	ittt	ge
   d6020:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6024:	4329      	orrge	r1, r5
   d6026:	bd30      	popge	{r4, r5, pc}
   d6028:	ea6f 0404 	mvn.w	r4, r4
   d602c:	3c1f      	subs	r4, #31
   d602e:	da1c      	bge.n	d606a <__adddf3+0x1d2>
   d6030:	340c      	adds	r4, #12
   d6032:	dc0e      	bgt.n	d6052 <__adddf3+0x1ba>
   d6034:	f104 0414 	add.w	r4, r4, #20
   d6038:	f1c4 0220 	rsb	r2, r4, #32
   d603c:	fa20 f004 	lsr.w	r0, r0, r4
   d6040:	fa01 f302 	lsl.w	r3, r1, r2
   d6044:	ea40 0003 	orr.w	r0, r0, r3
   d6048:	fa21 f304 	lsr.w	r3, r1, r4
   d604c:	ea45 0103 	orr.w	r1, r5, r3
   d6050:	bd30      	pop	{r4, r5, pc}
   d6052:	f1c4 040c 	rsb	r4, r4, #12
   d6056:	f1c4 0220 	rsb	r2, r4, #32
   d605a:	fa20 f002 	lsr.w	r0, r0, r2
   d605e:	fa01 f304 	lsl.w	r3, r1, r4
   d6062:	ea40 0003 	orr.w	r0, r0, r3
   d6066:	4629      	mov	r1, r5
   d6068:	bd30      	pop	{r4, r5, pc}
   d606a:	fa21 f004 	lsr.w	r0, r1, r4
   d606e:	4629      	mov	r1, r5
   d6070:	bd30      	pop	{r4, r5, pc}
   d6072:	f094 0f00 	teq	r4, #0
   d6076:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d607a:	bf06      	itte	eq
   d607c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6080:	3401      	addeq	r4, #1
   d6082:	3d01      	subne	r5, #1
   d6084:	e74e      	b.n	d5f24 <__adddf3+0x8c>
   d6086:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d608a:	bf18      	it	ne
   d608c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6090:	d029      	beq.n	d60e6 <__adddf3+0x24e>
   d6092:	ea94 0f05 	teq	r4, r5
   d6096:	bf08      	it	eq
   d6098:	ea90 0f02 	teqeq	r0, r2
   d609c:	d005      	beq.n	d60aa <__adddf3+0x212>
   d609e:	ea54 0c00 	orrs.w	ip, r4, r0
   d60a2:	bf04      	itt	eq
   d60a4:	4619      	moveq	r1, r3
   d60a6:	4610      	moveq	r0, r2
   d60a8:	bd30      	pop	{r4, r5, pc}
   d60aa:	ea91 0f03 	teq	r1, r3
   d60ae:	bf1e      	ittt	ne
   d60b0:	2100      	movne	r1, #0
   d60b2:	2000      	movne	r0, #0
   d60b4:	bd30      	popne	{r4, r5, pc}
   d60b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d60ba:	d105      	bne.n	d60c8 <__adddf3+0x230>
   d60bc:	0040      	lsls	r0, r0, #1
   d60be:	4149      	adcs	r1, r1
   d60c0:	bf28      	it	cs
   d60c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d60c6:	bd30      	pop	{r4, r5, pc}
   d60c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d60cc:	bf3c      	itt	cc
   d60ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d60d2:	bd30      	popcc	{r4, r5, pc}
   d60d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d60dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d60e0:	f04f 0000 	mov.w	r0, #0
   d60e4:	bd30      	pop	{r4, r5, pc}
   d60e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d60ea:	bf1a      	itte	ne
   d60ec:	4619      	movne	r1, r3
   d60ee:	4610      	movne	r0, r2
   d60f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d60f4:	bf1c      	itt	ne
   d60f6:	460b      	movne	r3, r1
   d60f8:	4602      	movne	r2, r0
   d60fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d60fe:	bf06      	itte	eq
   d6100:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6104:	ea91 0f03 	teqeq	r1, r3
   d6108:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d610c:	bd30      	pop	{r4, r5, pc}
   d610e:	bf00      	nop

000d6110 <__aeabi_ui2d>:
   d6110:	f090 0f00 	teq	r0, #0
   d6114:	bf04      	itt	eq
   d6116:	2100      	moveq	r1, #0
   d6118:	4770      	bxeq	lr
   d611a:	b530      	push	{r4, r5, lr}
   d611c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6120:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6124:	f04f 0500 	mov.w	r5, #0
   d6128:	f04f 0100 	mov.w	r1, #0
   d612c:	e750      	b.n	d5fd0 <__adddf3+0x138>
   d612e:	bf00      	nop

000d6130 <__aeabi_i2d>:
   d6130:	f090 0f00 	teq	r0, #0
   d6134:	bf04      	itt	eq
   d6136:	2100      	moveq	r1, #0
   d6138:	4770      	bxeq	lr
   d613a:	b530      	push	{r4, r5, lr}
   d613c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6140:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6144:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6148:	bf48      	it	mi
   d614a:	4240      	negmi	r0, r0
   d614c:	f04f 0100 	mov.w	r1, #0
   d6150:	e73e      	b.n	d5fd0 <__adddf3+0x138>
   d6152:	bf00      	nop

000d6154 <__aeabi_f2d>:
   d6154:	0042      	lsls	r2, r0, #1
   d6156:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d615a:	ea4f 0131 	mov.w	r1, r1, rrx
   d615e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6162:	bf1f      	itttt	ne
   d6164:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6168:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d616c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6170:	4770      	bxne	lr
   d6172:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6176:	bf08      	it	eq
   d6178:	4770      	bxeq	lr
   d617a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d617e:	bf04      	itt	eq
   d6180:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6184:	4770      	bxeq	lr
   d6186:	b530      	push	{r4, r5, lr}
   d6188:	f44f 7460 	mov.w	r4, #896	; 0x380
   d618c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6194:	e71c      	b.n	d5fd0 <__adddf3+0x138>
   d6196:	bf00      	nop

000d6198 <__aeabi_ul2d>:
   d6198:	ea50 0201 	orrs.w	r2, r0, r1
   d619c:	bf08      	it	eq
   d619e:	4770      	bxeq	lr
   d61a0:	b530      	push	{r4, r5, lr}
   d61a2:	f04f 0500 	mov.w	r5, #0
   d61a6:	e00a      	b.n	d61be <__aeabi_l2d+0x16>

000d61a8 <__aeabi_l2d>:
   d61a8:	ea50 0201 	orrs.w	r2, r0, r1
   d61ac:	bf08      	it	eq
   d61ae:	4770      	bxeq	lr
   d61b0:	b530      	push	{r4, r5, lr}
   d61b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d61b6:	d502      	bpl.n	d61be <__aeabi_l2d+0x16>
   d61b8:	4240      	negs	r0, r0
   d61ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d61c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d61c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d61ca:	f43f aed8 	beq.w	d5f7e <__adddf3+0xe6>
   d61ce:	f04f 0203 	mov.w	r2, #3
   d61d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61d6:	bf18      	it	ne
   d61d8:	3203      	addne	r2, #3
   d61da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d61de:	bf18      	it	ne
   d61e0:	3203      	addne	r2, #3
   d61e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d61e6:	f1c2 0320 	rsb	r3, r2, #32
   d61ea:	fa00 fc03 	lsl.w	ip, r0, r3
   d61ee:	fa20 f002 	lsr.w	r0, r0, r2
   d61f2:	fa01 fe03 	lsl.w	lr, r1, r3
   d61f6:	ea40 000e 	orr.w	r0, r0, lr
   d61fa:	fa21 f102 	lsr.w	r1, r1, r2
   d61fe:	4414      	add	r4, r2
   d6200:	e6bd      	b.n	d5f7e <__adddf3+0xe6>
   d6202:	bf00      	nop

000d6204 <__aeabi_dmul>:
   d6204:	b570      	push	{r4, r5, r6, lr}
   d6206:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d620a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d620e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6212:	bf1d      	ittte	ne
   d6214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6218:	ea94 0f0c 	teqne	r4, ip
   d621c:	ea95 0f0c 	teqne	r5, ip
   d6220:	f000 f8de 	bleq	d63e0 <__aeabi_dmul+0x1dc>
   d6224:	442c      	add	r4, r5
   d6226:	ea81 0603 	eor.w	r6, r1, r3
   d622a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d622e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6236:	bf18      	it	ne
   d6238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d623c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6244:	d038      	beq.n	d62b8 <__aeabi_dmul+0xb4>
   d6246:	fba0 ce02 	umull	ip, lr, r0, r2
   d624a:	f04f 0500 	mov.w	r5, #0
   d624e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6256:	fbe0 e503 	umlal	lr, r5, r0, r3
   d625a:	f04f 0600 	mov.w	r6, #0
   d625e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6262:	f09c 0f00 	teq	ip, #0
   d6266:	bf18      	it	ne
   d6268:	f04e 0e01 	orrne.w	lr, lr, #1
   d626c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6278:	d204      	bcs.n	d6284 <__aeabi_dmul+0x80>
   d627a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d627e:	416d      	adcs	r5, r5
   d6280:	eb46 0606 	adc.w	r6, r6, r6
   d6284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d628c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d629c:	bf88      	it	hi
   d629e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d62a2:	d81e      	bhi.n	d62e2 <__aeabi_dmul+0xde>
   d62a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d62a8:	bf08      	it	eq
   d62aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d62ae:	f150 0000 	adcs.w	r0, r0, #0
   d62b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d62b6:	bd70      	pop	{r4, r5, r6, pc}
   d62b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d62bc:	ea46 0101 	orr.w	r1, r6, r1
   d62c0:	ea40 0002 	orr.w	r0, r0, r2
   d62c4:	ea81 0103 	eor.w	r1, r1, r3
   d62c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d62cc:	bfc2      	ittt	gt
   d62ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   d62d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d62d6:	bd70      	popgt	{r4, r5, r6, pc}
   d62d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d62dc:	f04f 0e00 	mov.w	lr, #0
   d62e0:	3c01      	subs	r4, #1
   d62e2:	f300 80ab 	bgt.w	d643c <__aeabi_dmul+0x238>
   d62e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d62ea:	bfde      	ittt	le
   d62ec:	2000      	movle	r0, #0
   d62ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d62f2:	bd70      	pople	{r4, r5, r6, pc}
   d62f4:	f1c4 0400 	rsb	r4, r4, #0
   d62f8:	3c20      	subs	r4, #32
   d62fa:	da35      	bge.n	d6368 <__aeabi_dmul+0x164>
   d62fc:	340c      	adds	r4, #12
   d62fe:	dc1b      	bgt.n	d6338 <__aeabi_dmul+0x134>
   d6300:	f104 0414 	add.w	r4, r4, #20
   d6304:	f1c4 0520 	rsb	r5, r4, #32
   d6308:	fa00 f305 	lsl.w	r3, r0, r5
   d630c:	fa20 f004 	lsr.w	r0, r0, r4
   d6310:	fa01 f205 	lsl.w	r2, r1, r5
   d6314:	ea40 0002 	orr.w	r0, r0, r2
   d6318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d631c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6324:	fa21 f604 	lsr.w	r6, r1, r4
   d6328:	eb42 0106 	adc.w	r1, r2, r6
   d632c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6330:	bf08      	it	eq
   d6332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6336:	bd70      	pop	{r4, r5, r6, pc}
   d6338:	f1c4 040c 	rsb	r4, r4, #12
   d633c:	f1c4 0520 	rsb	r5, r4, #32
   d6340:	fa00 f304 	lsl.w	r3, r0, r4
   d6344:	fa20 f005 	lsr.w	r0, r0, r5
   d6348:	fa01 f204 	lsl.w	r2, r1, r4
   d634c:	ea40 0002 	orr.w	r0, r0, r2
   d6350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6358:	f141 0100 	adc.w	r1, r1, #0
   d635c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6360:	bf08      	it	eq
   d6362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6366:	bd70      	pop	{r4, r5, r6, pc}
   d6368:	f1c4 0520 	rsb	r5, r4, #32
   d636c:	fa00 f205 	lsl.w	r2, r0, r5
   d6370:	ea4e 0e02 	orr.w	lr, lr, r2
   d6374:	fa20 f304 	lsr.w	r3, r0, r4
   d6378:	fa01 f205 	lsl.w	r2, r1, r5
   d637c:	ea43 0302 	orr.w	r3, r3, r2
   d6380:	fa21 f004 	lsr.w	r0, r1, r4
   d6384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6388:	fa21 f204 	lsr.w	r2, r1, r4
   d638c:	ea20 0002 	bic.w	r0, r0, r2
   d6390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6398:	bf08      	it	eq
   d639a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d639e:	bd70      	pop	{r4, r5, r6, pc}
   d63a0:	f094 0f00 	teq	r4, #0
   d63a4:	d10f      	bne.n	d63c6 <__aeabi_dmul+0x1c2>
   d63a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d63aa:	0040      	lsls	r0, r0, #1
   d63ac:	eb41 0101 	adc.w	r1, r1, r1
   d63b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63b4:	bf08      	it	eq
   d63b6:	3c01      	subeq	r4, #1
   d63b8:	d0f7      	beq.n	d63aa <__aeabi_dmul+0x1a6>
   d63ba:	ea41 0106 	orr.w	r1, r1, r6
   d63be:	f095 0f00 	teq	r5, #0
   d63c2:	bf18      	it	ne
   d63c4:	4770      	bxne	lr
   d63c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d63ca:	0052      	lsls	r2, r2, #1
   d63cc:	eb43 0303 	adc.w	r3, r3, r3
   d63d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d63d4:	bf08      	it	eq
   d63d6:	3d01      	subeq	r5, #1
   d63d8:	d0f7      	beq.n	d63ca <__aeabi_dmul+0x1c6>
   d63da:	ea43 0306 	orr.w	r3, r3, r6
   d63de:	4770      	bx	lr
   d63e0:	ea94 0f0c 	teq	r4, ip
   d63e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d63e8:	bf18      	it	ne
   d63ea:	ea95 0f0c 	teqne	r5, ip
   d63ee:	d00c      	beq.n	d640a <__aeabi_dmul+0x206>
   d63f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63f4:	bf18      	it	ne
   d63f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63fa:	d1d1      	bne.n	d63a0 <__aeabi_dmul+0x19c>
   d63fc:	ea81 0103 	eor.w	r1, r1, r3
   d6400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6404:	f04f 0000 	mov.w	r0, #0
   d6408:	bd70      	pop	{r4, r5, r6, pc}
   d640a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d640e:	bf06      	itte	eq
   d6410:	4610      	moveq	r0, r2
   d6412:	4619      	moveq	r1, r3
   d6414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6418:	d019      	beq.n	d644e <__aeabi_dmul+0x24a>
   d641a:	ea94 0f0c 	teq	r4, ip
   d641e:	d102      	bne.n	d6426 <__aeabi_dmul+0x222>
   d6420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6424:	d113      	bne.n	d644e <__aeabi_dmul+0x24a>
   d6426:	ea95 0f0c 	teq	r5, ip
   d642a:	d105      	bne.n	d6438 <__aeabi_dmul+0x234>
   d642c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6430:	bf1c      	itt	ne
   d6432:	4610      	movne	r0, r2
   d6434:	4619      	movne	r1, r3
   d6436:	d10a      	bne.n	d644e <__aeabi_dmul+0x24a>
   d6438:	ea81 0103 	eor.w	r1, r1, r3
   d643c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6448:	f04f 0000 	mov.w	r0, #0
   d644c:	bd70      	pop	{r4, r5, r6, pc}
   d644e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6456:	bd70      	pop	{r4, r5, r6, pc}

000d6458 <__aeabi_ddiv>:
   d6458:	b570      	push	{r4, r5, r6, lr}
   d645a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d645e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6466:	bf1d      	ittte	ne
   d6468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d646c:	ea94 0f0c 	teqne	r4, ip
   d6470:	ea95 0f0c 	teqne	r5, ip
   d6474:	f000 f8a7 	bleq	d65c6 <__aeabi_ddiv+0x16e>
   d6478:	eba4 0405 	sub.w	r4, r4, r5
   d647c:	ea81 0e03 	eor.w	lr, r1, r3
   d6480:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6484:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6488:	f000 8088 	beq.w	d659c <__aeabi_ddiv+0x144>
   d648c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6490:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6494:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6498:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d649c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d64a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d64a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d64a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d64ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d64b0:	429d      	cmp	r5, r3
   d64b2:	bf08      	it	eq
   d64b4:	4296      	cmpeq	r6, r2
   d64b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d64ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d64be:	d202      	bcs.n	d64c6 <__aeabi_ddiv+0x6e>
   d64c0:	085b      	lsrs	r3, r3, #1
   d64c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d64c6:	1ab6      	subs	r6, r6, r2
   d64c8:	eb65 0503 	sbc.w	r5, r5, r3
   d64cc:	085b      	lsrs	r3, r3, #1
   d64ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d64d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d64d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d64da:	ebb6 0e02 	subs.w	lr, r6, r2
   d64de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64e2:	bf22      	ittt	cs
   d64e4:	1ab6      	subcs	r6, r6, r2
   d64e6:	4675      	movcs	r5, lr
   d64e8:	ea40 000c 	orrcs.w	r0, r0, ip
   d64ec:	085b      	lsrs	r3, r3, #1
   d64ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d64f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d64f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d64fa:	bf22      	ittt	cs
   d64fc:	1ab6      	subcs	r6, r6, r2
   d64fe:	4675      	movcs	r5, lr
   d6500:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6504:	085b      	lsrs	r3, r3, #1
   d6506:	ea4f 0232 	mov.w	r2, r2, rrx
   d650a:	ebb6 0e02 	subs.w	lr, r6, r2
   d650e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6512:	bf22      	ittt	cs
   d6514:	1ab6      	subcs	r6, r6, r2
   d6516:	4675      	movcs	r5, lr
   d6518:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d651c:	085b      	lsrs	r3, r3, #1
   d651e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6522:	ebb6 0e02 	subs.w	lr, r6, r2
   d6526:	eb75 0e03 	sbcs.w	lr, r5, r3
   d652a:	bf22      	ittt	cs
   d652c:	1ab6      	subcs	r6, r6, r2
   d652e:	4675      	movcs	r5, lr
   d6530:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6534:	ea55 0e06 	orrs.w	lr, r5, r6
   d6538:	d018      	beq.n	d656c <__aeabi_ddiv+0x114>
   d653a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d653e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6542:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6546:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d654a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d654e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6552:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6556:	d1c0      	bne.n	d64da <__aeabi_ddiv+0x82>
   d6558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d655c:	d10b      	bne.n	d6576 <__aeabi_ddiv+0x11e>
   d655e:	ea41 0100 	orr.w	r1, r1, r0
   d6562:	f04f 0000 	mov.w	r0, #0
   d6566:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d656a:	e7b6      	b.n	d64da <__aeabi_ddiv+0x82>
   d656c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6570:	bf04      	itt	eq
   d6572:	4301      	orreq	r1, r0
   d6574:	2000      	moveq	r0, #0
   d6576:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d657a:	bf88      	it	hi
   d657c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6580:	f63f aeaf 	bhi.w	d62e2 <__aeabi_dmul+0xde>
   d6584:	ebb5 0c03 	subs.w	ip, r5, r3
   d6588:	bf04      	itt	eq
   d658a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d658e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6592:	f150 0000 	adcs.w	r0, r0, #0
   d6596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d659a:	bd70      	pop	{r4, r5, r6, pc}
   d659c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d65a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d65a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d65a8:	bfc2      	ittt	gt
   d65aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   d65ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65b2:	bd70      	popgt	{r4, r5, r6, pc}
   d65b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65b8:	f04f 0e00 	mov.w	lr, #0
   d65bc:	3c01      	subs	r4, #1
   d65be:	e690      	b.n	d62e2 <__aeabi_dmul+0xde>
   d65c0:	ea45 0e06 	orr.w	lr, r5, r6
   d65c4:	e68d      	b.n	d62e2 <__aeabi_dmul+0xde>
   d65c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d65ca:	ea94 0f0c 	teq	r4, ip
   d65ce:	bf08      	it	eq
   d65d0:	ea95 0f0c 	teqeq	r5, ip
   d65d4:	f43f af3b 	beq.w	d644e <__aeabi_dmul+0x24a>
   d65d8:	ea94 0f0c 	teq	r4, ip
   d65dc:	d10a      	bne.n	d65f4 <__aeabi_ddiv+0x19c>
   d65de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d65e2:	f47f af34 	bne.w	d644e <__aeabi_dmul+0x24a>
   d65e6:	ea95 0f0c 	teq	r5, ip
   d65ea:	f47f af25 	bne.w	d6438 <__aeabi_dmul+0x234>
   d65ee:	4610      	mov	r0, r2
   d65f0:	4619      	mov	r1, r3
   d65f2:	e72c      	b.n	d644e <__aeabi_dmul+0x24a>
   d65f4:	ea95 0f0c 	teq	r5, ip
   d65f8:	d106      	bne.n	d6608 <__aeabi_ddiv+0x1b0>
   d65fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65fe:	f43f aefd 	beq.w	d63fc <__aeabi_dmul+0x1f8>
   d6602:	4610      	mov	r0, r2
   d6604:	4619      	mov	r1, r3
   d6606:	e722      	b.n	d644e <__aeabi_dmul+0x24a>
   d6608:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d660c:	bf18      	it	ne
   d660e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6612:	f47f aec5 	bne.w	d63a0 <__aeabi_dmul+0x19c>
   d6616:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d661a:	f47f af0d 	bne.w	d6438 <__aeabi_dmul+0x234>
   d661e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6622:	f47f aeeb 	bne.w	d63fc <__aeabi_dmul+0x1f8>
   d6626:	e712      	b.n	d644e <__aeabi_dmul+0x24a>

000d6628 <__aeabi_d2f>:
   d6628:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d662c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6630:	bf24      	itt	cs
   d6632:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6636:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d663a:	d90d      	bls.n	d6658 <__aeabi_d2f+0x30>
   d663c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6640:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6644:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6648:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d664c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6650:	bf08      	it	eq
   d6652:	f020 0001 	biceq.w	r0, r0, #1
   d6656:	4770      	bx	lr
   d6658:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d665c:	d121      	bne.n	d66a2 <__aeabi_d2f+0x7a>
   d665e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6662:	bfbc      	itt	lt
   d6664:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6668:	4770      	bxlt	lr
   d666a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d666e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6672:	f1c2 0218 	rsb	r2, r2, #24
   d6676:	f1c2 0c20 	rsb	ip, r2, #32
   d667a:	fa10 f30c 	lsls.w	r3, r0, ip
   d667e:	fa20 f002 	lsr.w	r0, r0, r2
   d6682:	bf18      	it	ne
   d6684:	f040 0001 	orrne.w	r0, r0, #1
   d6688:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d668c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6690:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6694:	ea40 000c 	orr.w	r0, r0, ip
   d6698:	fa23 f302 	lsr.w	r3, r3, r2
   d669c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d66a0:	e7cc      	b.n	d663c <__aeabi_d2f+0x14>
   d66a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d66a6:	d107      	bne.n	d66b8 <__aeabi_d2f+0x90>
   d66a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d66ac:	bf1e      	ittt	ne
   d66ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d66b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d66b6:	4770      	bxne	lr
   d66b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d66bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d66c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d66c4:	4770      	bx	lr
   d66c6:	bf00      	nop

000d66c8 <__cxa_atexit>:
   d66c8:	b510      	push	{r4, lr}
   d66ca:	4c05      	ldr	r4, [pc, #20]	; (d66e0 <__cxa_atexit+0x18>)
   d66cc:	4613      	mov	r3, r2
   d66ce:	b12c      	cbz	r4, d66dc <__cxa_atexit+0x14>
   d66d0:	460a      	mov	r2, r1
   d66d2:	4601      	mov	r1, r0
   d66d4:	2002      	movs	r0, #2
   d66d6:	f3af 8000 	nop.w
   d66da:	bd10      	pop	{r4, pc}
   d66dc:	4620      	mov	r0, r4
   d66de:	e7fc      	b.n	d66da <__cxa_atexit+0x12>
   d66e0:	00000000 	.word	0x00000000

000d66e4 <memcpy>:
   d66e4:	440a      	add	r2, r1
   d66e6:	4291      	cmp	r1, r2
   d66e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d66ec:	d100      	bne.n	d66f0 <memcpy+0xc>
   d66ee:	4770      	bx	lr
   d66f0:	b510      	push	{r4, lr}
   d66f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d66f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d66fa:	4291      	cmp	r1, r2
   d66fc:	d1f9      	bne.n	d66f2 <memcpy+0xe>
   d66fe:	bd10      	pop	{r4, pc}

000d6700 <memset>:
   d6700:	4402      	add	r2, r0
   d6702:	4603      	mov	r3, r0
   d6704:	4293      	cmp	r3, r2
   d6706:	d100      	bne.n	d670a <memset+0xa>
   d6708:	4770      	bx	lr
   d670a:	f803 1b01 	strb.w	r1, [r3], #1
   d670e:	e7f9      	b.n	d6704 <memset+0x4>

000d6710 <srand>:
   d6710:	b538      	push	{r3, r4, r5, lr}
   d6712:	4b0d      	ldr	r3, [pc, #52]	; (d6748 <srand+0x38>)
   d6714:	681d      	ldr	r5, [r3, #0]
   d6716:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6718:	4604      	mov	r4, r0
   d671a:	b97b      	cbnz	r3, d673c <srand+0x2c>
   d671c:	2018      	movs	r0, #24
   d671e:	f7fe fad7 	bl	d4cd0 <malloc>
   d6722:	4a0a      	ldr	r2, [pc, #40]	; (d674c <srand+0x3c>)
   d6724:	4b0a      	ldr	r3, [pc, #40]	; (d6750 <srand+0x40>)
   d6726:	63a8      	str	r0, [r5, #56]	; 0x38
   d6728:	e9c0 2300 	strd	r2, r3, [r0]
   d672c:	4b09      	ldr	r3, [pc, #36]	; (d6754 <srand+0x44>)
   d672e:	6083      	str	r3, [r0, #8]
   d6730:	230b      	movs	r3, #11
   d6732:	8183      	strh	r3, [r0, #12]
   d6734:	2201      	movs	r2, #1
   d6736:	2300      	movs	r3, #0
   d6738:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d673c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d673e:	2200      	movs	r2, #0
   d6740:	611c      	str	r4, [r3, #16]
   d6742:	615a      	str	r2, [r3, #20]
   d6744:	bd38      	pop	{r3, r4, r5, pc}
   d6746:	bf00      	nop
   d6748:	2003e570 	.word	0x2003e570
   d674c:	abcd330e 	.word	0xabcd330e
   d6750:	e66d1234 	.word	0xe66d1234
   d6754:	0005deec 	.word	0x0005deec

000d6758 <strdup>:
   d6758:	4b02      	ldr	r3, [pc, #8]	; (d6764 <strdup+0xc>)
   d675a:	4601      	mov	r1, r0
   d675c:	6818      	ldr	r0, [r3, #0]
   d675e:	f000 b803 	b.w	d6768 <_strdup_r>
   d6762:	bf00      	nop
   d6764:	2003e570 	.word	0x2003e570

000d6768 <_strdup_r>:
   d6768:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d676a:	4604      	mov	r4, r0
   d676c:	4608      	mov	r0, r1
   d676e:	460d      	mov	r5, r1
   d6770:	f000 f80f 	bl	d6792 <strlen>
   d6774:	1c42      	adds	r2, r0, #1
   d6776:	4611      	mov	r1, r2
   d6778:	4620      	mov	r0, r4
   d677a:	9201      	str	r2, [sp, #4]
   d677c:	f7fe fad0 	bl	d4d20 <_malloc_r>
   d6780:	4604      	mov	r4, r0
   d6782:	b118      	cbz	r0, d678c <_strdup_r+0x24>
   d6784:	9a01      	ldr	r2, [sp, #4]
   d6786:	4629      	mov	r1, r5
   d6788:	f7ff ffac 	bl	d66e4 <memcpy>
   d678c:	4620      	mov	r0, r4
   d678e:	b003      	add	sp, #12
   d6790:	bd30      	pop	{r4, r5, pc}

000d6792 <strlen>:
   d6792:	4603      	mov	r3, r0
   d6794:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6798:	2a00      	cmp	r2, #0
   d679a:	d1fb      	bne.n	d6794 <strlen+0x2>
   d679c:	1a18      	subs	r0, r3, r0
   d679e:	3801      	subs	r0, #1
   d67a0:	4770      	bx	lr

000d67a2 <link_code_end>:
	...

000d67a4 <dynalib_user>:
   d67a4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d67b4:	0000 0000 227b 6f6d 7369 7574 6572 3a22     ....{"moisture":
   d67c4:	6625 222c 6574 706d 7265 7461 7275 2265     %f,"temperature"
   d67d4:	253a 2c66 6d22 7465 6168 656e 3a22 6625     :%f,"methane":%f
   d67e4:	007d 7075 6164 6574 6f42 7964 7000 6275     }.updateBody.pub
   d67f4:	696c 6873 6e69 0067                         lishing.

000d67fc <_ZTVN5spark13CellularClassE>:
	...
   d6804:	4e83 000d 4e79 000d 4e6f 000d 4e25 000d     .N..yN..oN..%N..
   d6814:	4e63 000d 4e57 000d 5631 000d 5639 000d     cN..WN..1V..9V..
   d6824:	4e4b 000d 4e43 000d 4e39 000d 4e2f 000d     KN..CN..9N../N..
   d6834:	5669 000d                                   iV..

000d6838 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6840:	4ebd 000d 4ec3 000d 4f01 000d 4ed1 000d     .N...N...O...N..
   d6850:	4ebf 000d                                   .N..

000d6854 <_ZTVN5spark13EthernetClassE>:
	...
   d685c:	5453 000d 5449 000d 543f 000d 5435 000d     ST..IT..?T..5T..
   d686c:	5429 000d 541d 000d 5631 000d 5639 000d     )T...T..1V..9V..
   d687c:	5411 000d 5409 000d 53ff 000d 53f5 000d     .T...T...S...S..
   d688c:	5669 000d                                   iV..

000d6890 <_ZTV7TwoWire>:
	...
   d6898:	5471 000d 54bb 000d 5493 000d 5473 000d     qT...T...T..sT..
   d68a8:	549b 000d 54a3 000d 54ab 000d 54b3 000d     .T...T...T...T..

000d68b8 <_ZTV9IPAddress>:
	...
   d68c0:	5505 000d 54f5 000d 54f7 000d 7061 0070     .U...T...T..app.

000d68d0 <_ZTVN5spark12NetworkClassE>:
	...
   d68d8:	55f1 000d 55fb 000d 5605 000d 560f 000d     .U...U...V...V..
   d68e8:	5619 000d 5625 000d 5631 000d 5639 000d     .V..%V..1V..9V..
   d68f8:	5641 000d 564d 000d 5655 000d 565f 000d     AV..MV..UV.._V..
   d6908:	5669 000d 5925 252d 2d6d 6425 2554 3a48     iV..%Y-%m-%dT%H:
   d6918:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6928 <_ZTV11USARTSerial>:
	...
   d6930:	5a25 000d 5a91 000d 5a69 000d 575d 000d     %Z...Z..iZ..]W..
   d6940:	5a39 000d 5a55 000d 5a47 000d 5a63 000d     9Z..UZ..GZ..cZ..
   d6950:	5a27 000d 5a2b 000d                         'Z..+Z..

000d6958 <_ZTV9USBSerial>:
	...
   d6960:	5b25 000d 5b8d 000d 5b63 000d 575d 000d     %[...[..c[..]W..
   d6970:	5b55 000d 5b27 000d 5b37 000d 5b87 000d     U[..'[..7[...[..
   d6980:	5b47 000d 5b21 000d                         G[..![..

000d6988 <_ZSt7nothrow>:
	...

000d6989 <link_const_variable_data_end>:
   d6989:	00          	.byte	0x00
	...

000d698c <link_constructors_location>:
   d698c:	000d41c5 	.word	0x000d41c5
   d6990:	000d4dfd 	.word	0x000d4dfd
   d6994:	000d4e8d 	.word	0x000d4e8d
   d6998:	000d545d 	.word	0x000d545d
   d699c:	000d55e1 	.word	0x000d55e1
   d69a0:	000d5749 	.word	0x000d5749
   d69a4:	000d5875 	.word	0x000d5875
   d69a8:	000d59d5 	.word	0x000d59d5
   d69ac:	000d5a11 	.word	0x000d5a11
